openapi: 3.0.3
info:
  version: 0.1.0
  title: ITS (Hopefully) Tasty Bot API
  description: This API allows the mensa bot to manage dishes and fetch dish ratings


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    BasicError:
      type: object
      properties:
        what:
          type: string
    GetDishResp:
      description: Detailed description of a dish
      type: object
      properties:
        name:
          description: Name of the dish
          type: string
        servedAt:
          description: Location where this dish is served
          type: string
        occurrenceCount:
          description: Amount of times this dish occurred
          type: integer
        recentOccurrences:
          description: Most recent occurrences of the dish. Might not contain the whole history
          type: array
          items:
            type: string
            format: date
            description: format yyyy.mm.dd
        avgRating:
          description: Average rating for this dish. Omitted if there are no votes yet
          type: number
        ratings:
          description: Ratings for this dish. Keys mean "stars" and values mean ratings with that amount of stars. If more than zero votes are present avgRating field contains the average rating.
          type: object
          additionalProperties:
            type: integer
      required:
        - name
        - occurrenceCount
        - recentOccurrences
        - ratings
        - servedAt
    CreateOrUpdateDishReq:
      description: Transmit data for dish creation
      type: object
      properties:
        dishName:
          description: Name of the dish to be created / updated
          type: string
        servedAt:
          description: Location where this dish is served
          type: string
      required:
        - dishName
        - servedAt

    CreateOrUpdateDishResp:
      type: object
      description: Inform if dish was created or just updated and return its ID
      properties:
        createdNewDish:
          description: True if a new dish was created
          type: boolean
        createdNewLocation:
          description: True if a new location was created
          type: boolean
        dishID:
          description: ID of the created/updated dish. Just there to make subsequent calls easier
          type: integer
          format: int64
        checkMergeCandidates:
          description:  Can only be true for new dishes. If true, this dish should probably be merged with
            existing dishes. You should display the user a link to the web page, which can then fetch the merge candidates
            via the user API.
          type: boolean
      required:
        - createdNewDish
        - dishID
        - createdNewLocation
        - checkMergeCandidates



    CurrentVotingStreakResp:
      type: object
      description: Longest currently ongoing voting streaks
      properties:
        currentTeamVotingStreak:
          description: Length of current team voting streak in days
          type: integer
        currentUserVotingStreakLength:
          description: Length of the longest, currently ongoing voting streak by an individual user
          type: integer
        usersWithMaxStreak:
          description: All users who have a currently ongoing voting streak of length currentUserVotingStreakLength
          type: array
          items:
            type: string
            description: Email of the user



security:
  - ApiKeyAuth: []

paths:
  /statistics/currentVotingStreaks:
    get:
      description: A voting streak is the consecutive number of days that a user has voted. Weekends and vacations do not break
        voting streaks. This endpoint returns the current voting streak for the whole team (if there is any) as well as
        the longest currently ongoing voting streak of a user (if there is any)
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentVotingStreakResp'
        500:
          description: Internal error but input was fine

  /dishes/{dishID}:
    get:
      description: Get details like ratings and occurrences for this dish
      parameters:
        - in: path
          name: dishID
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: Detailed information about the dish
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDishResp'
        '400':
          description: Bad Input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        404:
          description: DishID not found
        '500':
          description: Internal error but input was fine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: User needs to login
  /createOrUpdateDish:
    post:
      description: Create new dish or update it's "last served" value if if already exists.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateDishReq'
      responses:
        200:
          description: Success. Return if a new dish was created as well as the dishID for future API calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateDishResp'
        '500':
          description: Internal error but input was fine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: User needs to login
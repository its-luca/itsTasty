// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDishRatings(t *testing.T) {
	t.Parallel()

	query := DishRatings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDishRatingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishRatingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DishRatings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishRatingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishRatingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishRatingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DishRatingExists(ctx, tx, o.DishID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if DishRating exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DishRatingExists to return true, but got false.")
	}
}

func testDishRatingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dishRatingFound, err := FindDishRating(ctx, tx, o.DishID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if dishRatingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDishRatingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DishRatings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDishRatingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DishRatings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDishRatingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dishRatingOne := &DishRating{}
	dishRatingTwo := &DishRating{}
	if err = randomize.Struct(seed, dishRatingOne, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}
	if err = randomize.Struct(seed, dishRatingTwo, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishRatingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishRatingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishRatings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDishRatingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dishRatingOne := &DishRating{}
	dishRatingTwo := &DishRating{}
	if err = randomize.Struct(seed, dishRatingOne, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}
	if err = randomize.Struct(seed, dishRatingTwo, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishRatingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishRatingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dishRatingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func dishRatingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishRating) error {
	*o = DishRating{}
	return nil
}

func testDishRatingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DishRating{}
	o := &DishRating{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dishRatingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DishRating object: %s", err)
	}

	AddDishRatingHook(boil.BeforeInsertHook, dishRatingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dishRatingBeforeInsertHooks = []DishRatingHook{}

	AddDishRatingHook(boil.AfterInsertHook, dishRatingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dishRatingAfterInsertHooks = []DishRatingHook{}

	AddDishRatingHook(boil.AfterSelectHook, dishRatingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dishRatingAfterSelectHooks = []DishRatingHook{}

	AddDishRatingHook(boil.BeforeUpdateHook, dishRatingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dishRatingBeforeUpdateHooks = []DishRatingHook{}

	AddDishRatingHook(boil.AfterUpdateHook, dishRatingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dishRatingAfterUpdateHooks = []DishRatingHook{}

	AddDishRatingHook(boil.BeforeDeleteHook, dishRatingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dishRatingBeforeDeleteHooks = []DishRatingHook{}

	AddDishRatingHook(boil.AfterDeleteHook, dishRatingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dishRatingAfterDeleteHooks = []DishRatingHook{}

	AddDishRatingHook(boil.BeforeUpsertHook, dishRatingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dishRatingBeforeUpsertHooks = []DishRatingHook{}

	AddDishRatingHook(boil.AfterUpsertHook, dishRatingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dishRatingAfterUpsertHooks = []DishRatingHook{}
}

func testDishRatingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishRatingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dishRatingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishRatingToOneDishUsingDish(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DishRating
	var foreign Dish

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DishID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dish().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DishRatingSlice{&local}
	if err = local.L.LoadDish(ctx, tx, false, (*[]*DishRating)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dish = nil
	if err = local.L.LoadDish(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDishRatingToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DishRating
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dishRatingDBTypes, false, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DishRatingSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*DishRating)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDishRatingToOneSetOpDishUsingDish(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DishRating
	var b, c Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishRatingDBTypes, false, strmangle.SetComplement(dishRatingPrimaryKeyColumns, dishRatingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dish{&b, &c} {
		err = a.SetDish(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dish != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DishRatings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DishID != x.ID {
			t.Error("foreign key was wrong value", a.DishID)
		}

		if exists, err := DishRatingExists(ctx, tx, a.DishID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDishRatingToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DishRating
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishRatingDBTypes, false, strmangle.SetComplement(dishRatingPrimaryKeyColumns, dishRatingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DishRatings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := DishRatingExists(ctx, tx, a.DishID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDishRatingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishRatingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishRatingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishRatingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishRatings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dishRatingDBTypes = map[string]string{`DishID`: `integer`, `UserID`: `integer`, `Date`: `timestamp without time zone`, `Rating`: `integer`}
	_                 = bytes.MinRead
)

func testDishRatingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dishRatingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dishRatingAllColumns) == len(dishRatingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDishRatingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dishRatingAllColumns) == len(dishRatingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishRating{}
	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishRatingDBTypes, true, dishRatingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dishRatingAllColumns, dishRatingPrimaryKeyColumns) {
		fields = dishRatingAllColumns
	} else {
		fields = strmangle.SetComplement(
			dishRatingAllColumns,
			dishRatingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DishRatingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDishRatingsUpsert(t *testing.T) {
	t.Parallel()

	if len(dishRatingAllColumns) == len(dishRatingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DishRating{}
	if err = randomize.Struct(seed, &o, dishRatingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishRating: %s", err)
	}

	count, err := DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dishRatingDBTypes, false, dishRatingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishRating struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishRating: %s", err)
	}

	count, err = DishRatings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dish is an object representing the database table.
type Dish struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LocationID   int       `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	MergedDishID null.Int  `boil:"merged_dish_id" json:"merged_dish_id,omitempty" toml:"merged_dish_id" yaml:"merged_dish_id,omitempty"`
	MergedAt     null.Time `boil:"merged_at" json:"merged_at,omitempty" toml:"merged_at" yaml:"merged_at,omitempty"`

	R *dishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DishColumns = struct {
	ID           string
	LocationID   string
	Name         string
	MergedDishID string
	MergedAt     string
}{
	ID:           "id",
	LocationID:   "location_id",
	Name:         "name",
	MergedDishID: "merged_dish_id",
	MergedAt:     "merged_at",
}

var DishTableColumns = struct {
	ID           string
	LocationID   string
	Name         string
	MergedDishID string
	MergedAt     string
}{
	ID:           "dishes.id",
	LocationID:   "dishes.location_id",
	Name:         "dishes.name",
	MergedDishID: "dishes.merged_dish_id",
	MergedAt:     "dishes.merged_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DishWhere = struct {
	ID           whereHelperint
	LocationID   whereHelperint
	Name         whereHelperstring
	MergedDishID whereHelpernull_Int
	MergedAt     whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"dishes\".\"id\""},
	LocationID:   whereHelperint{field: "\"dishes\".\"location_id\""},
	Name:         whereHelperstring{field: "\"dishes\".\"name\""},
	MergedDishID: whereHelpernull_Int{field: "\"dishes\".\"merged_dish_id\""},
	MergedAt:     whereHelpernull_Time{field: "\"dishes\".\"merged_at\""},
}

// DishRels is where relationship names are stored.
var DishRels = struct {
	Location        string
	MergedDish      string
	DishOccurrences string
	DishRatings     string
}{
	Location:        "Location",
	MergedDish:      "MergedDish",
	DishOccurrences: "DishOccurrences",
	DishRatings:     "DishRatings",
}

// dishR is where relationships are stored.
type dishR struct {
	Location        *Location           `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
	MergedDish      *MergedDish         `boil:"MergedDish" json:"MergedDish" toml:"MergedDish" yaml:"MergedDish"`
	DishOccurrences DishOccurrenceSlice `boil:"DishOccurrences" json:"DishOccurrences" toml:"DishOccurrences" yaml:"DishOccurrences"`
	DishRatings     DishRatingSlice     `boil:"DishRatings" json:"DishRatings" toml:"DishRatings" yaml:"DishRatings"`
}

// NewStruct creates a new relationship struct
func (*dishR) NewStruct() *dishR {
	return &dishR{}
}

func (r *dishR) GetLocation() *Location {
	if r == nil {
		return nil
	}
	return r.Location
}

func (r *dishR) GetMergedDish() *MergedDish {
	if r == nil {
		return nil
	}
	return r.MergedDish
}

func (r *dishR) GetDishOccurrences() DishOccurrenceSlice {
	if r == nil {
		return nil
	}
	return r.DishOccurrences
}

func (r *dishR) GetDishRatings() DishRatingSlice {
	if r == nil {
		return nil
	}
	return r.DishRatings
}

// dishL is where Load methods for each relationship are stored.
type dishL struct{}

var (
	dishAllColumns            = []string{"id", "location_id", "name", "merged_dish_id", "merged_at"}
	dishColumnsWithoutDefault = []string{"location_id", "name"}
	dishColumnsWithDefault    = []string{"id", "merged_dish_id", "merged_at"}
	dishPrimaryKeyColumns     = []string{"id"}
	dishGeneratedColumns      = []string{}
)

type (
	// DishSlice is an alias for a slice of pointers to Dish.
	// This should almost always be used instead of []Dish.
	DishSlice []*Dish
	// DishHook is the signature for custom Dish hook methods
	DishHook func(context.Context, boil.ContextExecutor, *Dish) error

	dishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dishType                 = reflect.TypeOf(&Dish{})
	dishMapping              = queries.MakeStructMapping(dishType)
	dishPrimaryKeyMapping, _ = queries.BindMapping(dishType, dishMapping, dishPrimaryKeyColumns)
	dishInsertCacheMut       sync.RWMutex
	dishInsertCache          = make(map[string]insertCache)
	dishUpdateCacheMut       sync.RWMutex
	dishUpdateCache          = make(map[string]updateCache)
	dishUpsertCacheMut       sync.RWMutex
	dishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dishAfterSelectHooks []DishHook

var dishBeforeInsertHooks []DishHook
var dishAfterInsertHooks []DishHook

var dishBeforeUpdateHooks []DishHook
var dishAfterUpdateHooks []DishHook

var dishBeforeDeleteHooks []DishHook
var dishAfterDeleteHooks []DishHook

var dishBeforeUpsertHooks []DishHook
var dishAfterUpsertHooks []DishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDishHook registers your hook function for all future operations.
func AddDishHook(hookPoint boil.HookPoint, dishHook DishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dishAfterSelectHooks = append(dishAfterSelectHooks, dishHook)
	case boil.BeforeInsertHook:
		dishBeforeInsertHooks = append(dishBeforeInsertHooks, dishHook)
	case boil.AfterInsertHook:
		dishAfterInsertHooks = append(dishAfterInsertHooks, dishHook)
	case boil.BeforeUpdateHook:
		dishBeforeUpdateHooks = append(dishBeforeUpdateHooks, dishHook)
	case boil.AfterUpdateHook:
		dishAfterUpdateHooks = append(dishAfterUpdateHooks, dishHook)
	case boil.BeforeDeleteHook:
		dishBeforeDeleteHooks = append(dishBeforeDeleteHooks, dishHook)
	case boil.AfterDeleteHook:
		dishAfterDeleteHooks = append(dishAfterDeleteHooks, dishHook)
	case boil.BeforeUpsertHook:
		dishBeforeUpsertHooks = append(dishBeforeUpsertHooks, dishHook)
	case boil.AfterUpsertHook:
		dishAfterUpsertHooks = append(dishAfterUpsertHooks, dishHook)
	}
}

// One returns a single dish record from the query.
func (q dishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dish, error) {
	o := &Dish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to execute a one query for dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dish records from the query.
func (q dishQuery) All(ctx context.Context, exec boil.ContextExecutor) (DishSlice, error) {
	var o []*Dish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to assign all query results to Dish slice")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dish records in the query.
func (q dishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to count dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: failed to check if dishes exists")
	}

	return count > 0, nil
}

// Location pointed to by the foreign key.
func (o *Dish) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	return Locations(queryMods...)
}

// MergedDish pointed to by the foreign key.
func (o *Dish) MergedDish(mods ...qm.QueryMod) mergedDishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MergedDishID),
	}

	queryMods = append(queryMods, mods...)

	return MergedDishes(queryMods...)
}

// DishOccurrences retrieves all the dish_occurrence's DishOccurrences with an executor.
func (o *Dish) DishOccurrences(mods ...qm.QueryMod) dishOccurrenceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dish_occurrences\".\"dish_id\"=?", o.ID),
	)

	return DishOccurrences(queryMods...)
}

// DishRatings retrieves all the dish_rating's DishRatings with an executor.
func (o *Dish) DishRatings(mods ...qm.QueryMod) dishRatingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dish_ratings\".\"dish_id\"=?", o.ID),
	)

	return DishRatings(queryMods...)
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args = append(args, object.LocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.Dishes = append(foreign.R.Dishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Dishes = append(foreign.R.Dishes, local)
				break
			}
		}
	}

	return nil
}

// LoadMergedDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishL) LoadMergedDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		if !queries.IsNil(object.MergedDishID) {
			args = append(args, object.MergedDishID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MergedDishID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MergedDishID) {
				args = append(args, obj.MergedDishID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`merged_dishes`),
		qm.WhereIn(`merged_dishes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MergedDish")
	}

	var resultSlice []*MergedDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MergedDish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for merged_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for merged_dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MergedDish = foreign
		if foreign.R == nil {
			foreign.R = &mergedDishR{}
		}
		foreign.R.Dishes = append(foreign.R.Dishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MergedDishID, foreign.ID) {
				local.R.MergedDish = foreign
				if foreign.R == nil {
					foreign.R = &mergedDishR{}
				}
				foreign.R.Dishes = append(foreign.R.Dishes, local)
				break
			}
		}
	}

	return nil
}

// LoadDishOccurrences allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadDishOccurrences(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dish_occurrences`),
		qm.WhereIn(`dish_occurrences.dish_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dish_occurrences")
	}

	var resultSlice []*DishOccurrence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dish_occurrences")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dish_occurrences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dish_occurrences")
	}

	if len(dishOccurrenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DishOccurrences = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dishOccurrenceR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DishID {
				local.R.DishOccurrences = append(local.R.DishOccurrences, foreign)
				if foreign.R == nil {
					foreign.R = &dishOccurrenceR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// LoadDishRatings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadDishRatings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dish_ratings`),
		qm.WhereIn(`dish_ratings.dish_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dish_ratings")
	}

	var resultSlice []*DishRating
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dish_ratings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dish_ratings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dish_ratings")
	}

	if len(dishRatingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DishRatings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dishRatingR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DishID {
				local.R.DishRatings = append(local.R.DishRatings, foreign)
				if foreign.R == nil {
					foreign.R = &dishRatingR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// SetLocation of the dish to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.Dishes.
func (o *Dish) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &dishR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			Dishes: DishSlice{o},
		}
	} else {
		related.R.Dishes = append(related.R.Dishes, o)
	}

	return nil
}

// SetMergedDish of the dish to the related item.
// Sets o.R.MergedDish to related.
// Adds o to related.R.Dishes.
func (o *Dish) SetMergedDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MergedDish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"merged_dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MergedDishID, related.ID)
	if o.R == nil {
		o.R = &dishR{
			MergedDish: related,
		}
	} else {
		o.R.MergedDish = related
	}

	if related.R == nil {
		related.R = &mergedDishR{
			Dishes: DishSlice{o},
		}
	} else {
		related.R.Dishes = append(related.R.Dishes, o)
	}

	return nil
}

// RemoveMergedDish relationship.
// Sets o.R.MergedDish to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Dish) RemoveMergedDish(ctx context.Context, exec boil.ContextExecutor, related *MergedDish) error {
	var err error

	queries.SetScanner(&o.MergedDishID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("merged_dish_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MergedDish = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Dishes {
		if queries.Equal(o.MergedDishID, ri.MergedDishID) {
			continue
		}

		ln := len(related.R.Dishes)
		if ln > 1 && i < ln-1 {
			related.R.Dishes[i] = related.R.Dishes[ln-1]
		}
		related.R.Dishes = related.R.Dishes[:ln-1]
		break
	}
	return nil
}

// AddDishOccurrences adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.DishOccurrences.
// Sets related.R.Dish appropriately.
func (o *Dish) AddDishOccurrences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DishOccurrence) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DishID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dish_occurrences\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, dishOccurrencePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DishID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dishR{
			DishOccurrences: related,
		}
	} else {
		o.R.DishOccurrences = append(o.R.DishOccurrences, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dishOccurrenceR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// AddDishRatings adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.DishRatings.
// Sets related.R.Dish appropriately.
func (o *Dish) AddDishRatings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DishRating) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DishID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dish_ratings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, dishRatingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DishID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dishR{
			DishRatings: related,
		}
	} else {
		o.R.DishRatings = append(o.R.DishRatings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dishRatingR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// Dishes retrieves all the records using an executor.
func Dishes(mods ...qm.QueryMod) dishQuery {
	mods = append(mods, qm.From("\"dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dishes\".*"})
	}

	return dishQuery{q}
}

// FindDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDish(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Dish, error) {
	dishObj := &Dish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dishes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: unable to select from dishes")
	}

	if err = dishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dishObj, err
	}

	return dishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no dishes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dishInsertCacheMut.RLock()
	cache, cached := dishInsertCache[key]
	dishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dishAllColumns,
			dishColumnsWithDefault,
			dishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dishType, dishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to insert into dishes")
	}

	if !cached {
		dishInsertCacheMut.Lock()
		dishInsertCache[key] = cache
		dishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dishUpdateCacheMut.RLock()
	cache, cached := dishUpdateCache[key]
	dishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dishAllColumns,
			dishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboilerPSQL: unable to update dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, append(wl, dishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by update for dishes")
	}

	if !cached {
		dishUpdateCacheMut.Lock()
		dishUpdateCache[key] = cache
		dishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all for dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected for dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboilerPSQL: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all in dish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected all in update all dish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no dishes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dishUpsertCacheMut.RLock()
	cache, cached := dishUpsertCache[key]
	dishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dishAllColumns,
			dishColumnsWithDefault,
			dishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dishAllColumns,
			dishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboilerPSQL: unable to upsert dishes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dishPrimaryKeyColumns))
			copy(conflict, dishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dishes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dishType, dishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to upsert dishes")
	}

	if !cached {
		dishUpsertCacheMut.Lock()
		dishUpsertCache[key] = cache
		dishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboilerPSQL: no Dish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dishPrimaryKeyMapping)
	sql := "DELETE FROM \"dishes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete from dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by delete for dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboilerPSQL: no dishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from dish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for dishes")
	}

	if len(dishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDish(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dishes\".* FROM \"dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to reload all in DishSlice")
	}

	*o = slice

	return nil
}

// DishExists checks if the Dish row exists.
func DishExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dishes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: unable to check if dishes exists")
	}

	return exists, nil
}

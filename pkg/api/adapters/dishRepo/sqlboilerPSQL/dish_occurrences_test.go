// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDishOccurrences(t *testing.T) {
	t.Parallel()

	query := DishOccurrences()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDishOccurrencesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishOccurrencesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DishOccurrences().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishOccurrencesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishOccurrenceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishOccurrencesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DishOccurrenceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DishOccurrence exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DishOccurrenceExists to return true, but got false.")
	}
}

func testDishOccurrencesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dishOccurrenceFound, err := FindDishOccurrence(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dishOccurrenceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDishOccurrencesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DishOccurrences().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDishOccurrencesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DishOccurrences().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDishOccurrencesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dishOccurrenceOne := &DishOccurrence{}
	dishOccurrenceTwo := &DishOccurrence{}
	if err = randomize.Struct(seed, dishOccurrenceOne, dishOccurrenceDBTypes, false, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}
	if err = randomize.Struct(seed, dishOccurrenceTwo, dishOccurrenceDBTypes, false, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishOccurrenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishOccurrenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishOccurrences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDishOccurrencesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dishOccurrenceOne := &DishOccurrence{}
	dishOccurrenceTwo := &DishOccurrence{}
	if err = randomize.Struct(seed, dishOccurrenceOne, dishOccurrenceDBTypes, false, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}
	if err = randomize.Struct(seed, dishOccurrenceTwo, dishOccurrenceDBTypes, false, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishOccurrenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishOccurrenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dishOccurrenceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func dishOccurrenceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishOccurrence) error {
	*o = DishOccurrence{}
	return nil
}

func testDishOccurrencesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DishOccurrence{}
	o := &DishOccurrence{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DishOccurrence object: %s", err)
	}

	AddDishOccurrenceHook(boil.BeforeInsertHook, dishOccurrenceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceBeforeInsertHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.AfterInsertHook, dishOccurrenceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceAfterInsertHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.AfterSelectHook, dishOccurrenceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceAfterSelectHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.BeforeUpdateHook, dishOccurrenceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceBeforeUpdateHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.AfterUpdateHook, dishOccurrenceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceAfterUpdateHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.BeforeDeleteHook, dishOccurrenceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceBeforeDeleteHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.AfterDeleteHook, dishOccurrenceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceAfterDeleteHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.BeforeUpsertHook, dishOccurrenceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceBeforeUpsertHooks = []DishOccurrenceHook{}

	AddDishOccurrenceHook(boil.AfterUpsertHook, dishOccurrenceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dishOccurrenceAfterUpsertHooks = []DishOccurrenceHook{}
}

func testDishOccurrencesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishOccurrencesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dishOccurrenceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishOccurrenceToOneDishUsingDish(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DishOccurrence
	var foreign Dish

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dishOccurrenceDBTypes, false, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DishID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dish().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DishOccurrenceSlice{&local}
	if err = local.L.LoadDish(ctx, tx, false, (*[]*DishOccurrence)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dish = nil
	if err = local.L.LoadDish(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDishOccurrenceToOneSetOpDishUsingDish(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DishOccurrence
	var b, c Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishOccurrenceDBTypes, false, strmangle.SetComplement(dishOccurrencePrimaryKeyColumns, dishOccurrenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dish{&b, &c} {
		err = a.SetDish(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dish != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DishOccurrences[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DishID != x.ID {
			t.Error("foreign key was wrong value", a.DishID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DishID))
		reflect.Indirect(reflect.ValueOf(&a.DishID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DishID != x.ID {
			t.Error("foreign key was wrong value", a.DishID, x.ID)
		}
	}
}

func testDishOccurrencesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishOccurrencesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishOccurrenceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishOccurrencesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishOccurrences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dishOccurrenceDBTypes = map[string]string{`ID`: `integer`, `DishID`: `integer`, `Date`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testDishOccurrencesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dishOccurrencePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dishOccurrenceAllColumns) == len(dishOccurrencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDishOccurrencesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dishOccurrenceAllColumns) == len(dishOccurrencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishOccurrence{}
	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishOccurrenceDBTypes, true, dishOccurrencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dishOccurrenceAllColumns, dishOccurrencePrimaryKeyColumns) {
		fields = dishOccurrenceAllColumns
	} else {
		fields = strmangle.SetComplement(
			dishOccurrenceAllColumns,
			dishOccurrencePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DishOccurrenceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDishOccurrencesUpsert(t *testing.T) {
	t.Parallel()

	if len(dishOccurrenceAllColumns) == len(dishOccurrencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DishOccurrence{}
	if err = randomize.Struct(seed, &o, dishOccurrenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishOccurrence: %s", err)
	}

	count, err := DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dishOccurrenceDBTypes, false, dishOccurrencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishOccurrence struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishOccurrence: %s", err)
	}

	count, err = DishOccurrences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

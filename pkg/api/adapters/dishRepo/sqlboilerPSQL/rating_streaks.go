// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RatingStreak is an object representing the database table.
type RatingStreak struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	StartDate time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate   time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *ratingStreakR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ratingStreakL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RatingStreakColumns = struct {
	ID        string
	Name      string
	StartDate string
	EndDate   string
}{
	ID:        "id",
	Name:      "name",
	StartDate: "start_date",
	EndDate:   "end_date",
}

var RatingStreakTableColumns = struct {
	ID        string
	Name      string
	StartDate string
	EndDate   string
}{
	ID:        "rating_streaks.id",
	Name:      "rating_streaks.name",
	StartDate: "rating_streaks.start_date",
	EndDate:   "rating_streaks.end_date",
}

// Generated where

var RatingStreakWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	StartDate whereHelpertime_Time
	EndDate   whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"rating_streaks\".\"id\""},
	Name:      whereHelperstring{field: "\"rating_streaks\".\"name\""},
	StartDate: whereHelpertime_Time{field: "\"rating_streaks\".\"start_date\""},
	EndDate:   whereHelpertime_Time{field: "\"rating_streaks\".\"end_date\""},
}

// RatingStreakRels is where relationship names are stored.
var RatingStreakRels = struct {
}{}

// ratingStreakR is where relationships are stored.
type ratingStreakR struct {
}

// NewStruct creates a new relationship struct
func (*ratingStreakR) NewStruct() *ratingStreakR {
	return &ratingStreakR{}
}

// ratingStreakL is where Load methods for each relationship are stored.
type ratingStreakL struct{}

var (
	ratingStreakAllColumns            = []string{"id", "name", "start_date", "end_date"}
	ratingStreakColumnsWithoutDefault = []string{"name", "start_date", "end_date"}
	ratingStreakColumnsWithDefault    = []string{"id"}
	ratingStreakPrimaryKeyColumns     = []string{"id"}
	ratingStreakGeneratedColumns      = []string{}
)

type (
	// RatingStreakSlice is an alias for a slice of pointers to RatingStreak.
	// This should almost always be used instead of []RatingStreak.
	RatingStreakSlice []*RatingStreak
	// RatingStreakHook is the signature for custom RatingStreak hook methods
	RatingStreakHook func(context.Context, boil.ContextExecutor, *RatingStreak) error

	ratingStreakQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ratingStreakType                 = reflect.TypeOf(&RatingStreak{})
	ratingStreakMapping              = queries.MakeStructMapping(ratingStreakType)
	ratingStreakPrimaryKeyMapping, _ = queries.BindMapping(ratingStreakType, ratingStreakMapping, ratingStreakPrimaryKeyColumns)
	ratingStreakInsertCacheMut       sync.RWMutex
	ratingStreakInsertCache          = make(map[string]insertCache)
	ratingStreakUpdateCacheMut       sync.RWMutex
	ratingStreakUpdateCache          = make(map[string]updateCache)
	ratingStreakUpsertCacheMut       sync.RWMutex
	ratingStreakUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ratingStreakAfterSelectHooks []RatingStreakHook

var ratingStreakBeforeInsertHooks []RatingStreakHook
var ratingStreakAfterInsertHooks []RatingStreakHook

var ratingStreakBeforeUpdateHooks []RatingStreakHook
var ratingStreakAfterUpdateHooks []RatingStreakHook

var ratingStreakBeforeDeleteHooks []RatingStreakHook
var ratingStreakAfterDeleteHooks []RatingStreakHook

var ratingStreakBeforeUpsertHooks []RatingStreakHook
var ratingStreakAfterUpsertHooks []RatingStreakHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RatingStreak) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RatingStreak) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RatingStreak) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RatingStreak) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RatingStreak) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RatingStreak) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RatingStreak) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RatingStreak) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RatingStreak) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingStreakAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRatingStreakHook registers your hook function for all future operations.
func AddRatingStreakHook(hookPoint boil.HookPoint, ratingStreakHook RatingStreakHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ratingStreakAfterSelectHooks = append(ratingStreakAfterSelectHooks, ratingStreakHook)
	case boil.BeforeInsertHook:
		ratingStreakBeforeInsertHooks = append(ratingStreakBeforeInsertHooks, ratingStreakHook)
	case boil.AfterInsertHook:
		ratingStreakAfterInsertHooks = append(ratingStreakAfterInsertHooks, ratingStreakHook)
	case boil.BeforeUpdateHook:
		ratingStreakBeforeUpdateHooks = append(ratingStreakBeforeUpdateHooks, ratingStreakHook)
	case boil.AfterUpdateHook:
		ratingStreakAfterUpdateHooks = append(ratingStreakAfterUpdateHooks, ratingStreakHook)
	case boil.BeforeDeleteHook:
		ratingStreakBeforeDeleteHooks = append(ratingStreakBeforeDeleteHooks, ratingStreakHook)
	case boil.AfterDeleteHook:
		ratingStreakAfterDeleteHooks = append(ratingStreakAfterDeleteHooks, ratingStreakHook)
	case boil.BeforeUpsertHook:
		ratingStreakBeforeUpsertHooks = append(ratingStreakBeforeUpsertHooks, ratingStreakHook)
	case boil.AfterUpsertHook:
		ratingStreakAfterUpsertHooks = append(ratingStreakAfterUpsertHooks, ratingStreakHook)
	}
}

// One returns a single ratingStreak record from the query.
func (q ratingStreakQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RatingStreak, error) {
	o := &RatingStreak{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to execute a one query for rating_streaks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RatingStreak records from the query.
func (q ratingStreakQuery) All(ctx context.Context, exec boil.ContextExecutor) (RatingStreakSlice, error) {
	var o []*RatingStreak

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to assign all query results to RatingStreak slice")
	}

	if len(ratingStreakAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RatingStreak records in the query.
func (q ratingStreakQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to count rating_streaks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ratingStreakQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: failed to check if rating_streaks exists")
	}

	return count > 0, nil
}

// RatingStreaks retrieves all the records using an executor.
func RatingStreaks(mods ...qm.QueryMod) ratingStreakQuery {
	mods = append(mods, qm.From("\"rating_streaks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rating_streaks\".*"})
	}

	return ratingStreakQuery{q}
}

// FindRatingStreak retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRatingStreak(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RatingStreak, error) {
	ratingStreakObj := &RatingStreak{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rating_streaks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ratingStreakObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: unable to select from rating_streaks")
	}

	if err = ratingStreakObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ratingStreakObj, err
	}

	return ratingStreakObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RatingStreak) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no rating_streaks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingStreakColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ratingStreakInsertCacheMut.RLock()
	cache, cached := ratingStreakInsertCache[key]
	ratingStreakInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ratingStreakAllColumns,
			ratingStreakColumnsWithDefault,
			ratingStreakColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ratingStreakType, ratingStreakMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ratingStreakType, ratingStreakMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rating_streaks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rating_streaks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to insert into rating_streaks")
	}

	if !cached {
		ratingStreakInsertCacheMut.Lock()
		ratingStreakInsertCache[key] = cache
		ratingStreakInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RatingStreak.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RatingStreak) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ratingStreakUpdateCacheMut.RLock()
	cache, cached := ratingStreakUpdateCache[key]
	ratingStreakUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ratingStreakAllColumns,
			ratingStreakPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboilerPSQL: unable to update rating_streaks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rating_streaks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ratingStreakPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ratingStreakType, ratingStreakMapping, append(wl, ratingStreakPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update rating_streaks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by update for rating_streaks")
	}

	if !cached {
		ratingStreakUpdateCacheMut.Lock()
		ratingStreakUpdateCache[key] = cache
		ratingStreakUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ratingStreakQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all for rating_streaks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected for rating_streaks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RatingStreakSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboilerPSQL: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingStreakPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rating_streaks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ratingStreakPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all in ratingStreak slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected all in update all ratingStreak")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RatingStreak) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no rating_streaks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingStreakColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ratingStreakUpsertCacheMut.RLock()
	cache, cached := ratingStreakUpsertCache[key]
	ratingStreakUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ratingStreakAllColumns,
			ratingStreakColumnsWithDefault,
			ratingStreakColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ratingStreakAllColumns,
			ratingStreakPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboilerPSQL: unable to upsert rating_streaks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ratingStreakPrimaryKeyColumns))
			copy(conflict, ratingStreakPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rating_streaks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ratingStreakType, ratingStreakMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ratingStreakType, ratingStreakMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to upsert rating_streaks")
	}

	if !cached {
		ratingStreakUpsertCacheMut.Lock()
		ratingStreakUpsertCache[key] = cache
		ratingStreakUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RatingStreak record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RatingStreak) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboilerPSQL: no RatingStreak provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ratingStreakPrimaryKeyMapping)
	sql := "DELETE FROM \"rating_streaks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete from rating_streaks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by delete for rating_streaks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ratingStreakQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboilerPSQL: no ratingStreakQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from rating_streaks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for rating_streaks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RatingStreakSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ratingStreakBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingStreakPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rating_streaks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ratingStreakPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from ratingStreak slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for rating_streaks")
	}

	if len(ratingStreakAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RatingStreak) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRatingStreak(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RatingStreakSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RatingStreakSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingStreakPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rating_streaks\".* FROM \"rating_streaks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ratingStreakPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to reload all in RatingStreakSlice")
	}

	*o = slice

	return nil
}

// RatingStreakExists checks if the RatingStreak row exists.
func RatingStreakExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rating_streaks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: unable to check if rating_streaks exists")
	}

	return exists, nil
}

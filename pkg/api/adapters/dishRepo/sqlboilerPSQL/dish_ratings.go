// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DishRating is an object representing the database table.
type DishRating struct {
	DishID int       `boil:"dish_id" json:"dish_id" toml:"dish_id" yaml:"dish_id"`
	UserID int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Date   time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Rating int       `boil:"rating" json:"rating" toml:"rating" yaml:"rating"`

	R *dishRatingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dishRatingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DishRatingColumns = struct {
	DishID string
	UserID string
	Date   string
	Rating string
}{
	DishID: "dish_id",
	UserID: "user_id",
	Date:   "date",
	Rating: "rating",
}

var DishRatingTableColumns = struct {
	DishID string
	UserID string
	Date   string
	Rating string
}{
	DishID: "dish_ratings.dish_id",
	UserID: "dish_ratings.user_id",
	Date:   "dish_ratings.date",
	Rating: "dish_ratings.rating",
}

// Generated where

var DishRatingWhere = struct {
	DishID whereHelperint
	UserID whereHelperint
	Date   whereHelpertime_Time
	Rating whereHelperint
}{
	DishID: whereHelperint{field: "\"dish_ratings\".\"dish_id\""},
	UserID: whereHelperint{field: "\"dish_ratings\".\"user_id\""},
	Date:   whereHelpertime_Time{field: "\"dish_ratings\".\"date\""},
	Rating: whereHelperint{field: "\"dish_ratings\".\"rating\""},
}

// DishRatingRels is where relationship names are stored.
var DishRatingRels = struct {
	Dish string
	User string
}{
	Dish: "Dish",
	User: "User",
}

// dishRatingR is where relationships are stored.
type dishRatingR struct {
	Dish *Dish `boil:"Dish" json:"Dish" toml:"Dish" yaml:"Dish"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*dishRatingR) NewStruct() *dishRatingR {
	return &dishRatingR{}
}

func (r *dishRatingR) GetDish() *Dish {
	if r == nil {
		return nil
	}
	return r.Dish
}

func (r *dishRatingR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// dishRatingL is where Load methods for each relationship are stored.
type dishRatingL struct{}

var (
	dishRatingAllColumns            = []string{"dish_id", "user_id", "date", "rating"}
	dishRatingColumnsWithoutDefault = []string{"dish_id", "user_id", "date", "rating"}
	dishRatingColumnsWithDefault    = []string{}
	dishRatingPrimaryKeyColumns     = []string{"dish_id", "user_id"}
	dishRatingGeneratedColumns      = []string{}
)

type (
	// DishRatingSlice is an alias for a slice of pointers to DishRating.
	// This should almost always be used instead of []DishRating.
	DishRatingSlice []*DishRating
	// DishRatingHook is the signature for custom DishRating hook methods
	DishRatingHook func(context.Context, boil.ContextExecutor, *DishRating) error

	dishRatingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dishRatingType                 = reflect.TypeOf(&DishRating{})
	dishRatingMapping              = queries.MakeStructMapping(dishRatingType)
	dishRatingPrimaryKeyMapping, _ = queries.BindMapping(dishRatingType, dishRatingMapping, dishRatingPrimaryKeyColumns)
	dishRatingInsertCacheMut       sync.RWMutex
	dishRatingInsertCache          = make(map[string]insertCache)
	dishRatingUpdateCacheMut       sync.RWMutex
	dishRatingUpdateCache          = make(map[string]updateCache)
	dishRatingUpsertCacheMut       sync.RWMutex
	dishRatingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dishRatingAfterSelectHooks []DishRatingHook

var dishRatingBeforeInsertHooks []DishRatingHook
var dishRatingAfterInsertHooks []DishRatingHook

var dishRatingBeforeUpdateHooks []DishRatingHook
var dishRatingAfterUpdateHooks []DishRatingHook

var dishRatingBeforeDeleteHooks []DishRatingHook
var dishRatingAfterDeleteHooks []DishRatingHook

var dishRatingBeforeUpsertHooks []DishRatingHook
var dishRatingAfterUpsertHooks []DishRatingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DishRating) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DishRating) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DishRating) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DishRating) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DishRating) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DishRating) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DishRating) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DishRating) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DishRating) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishRatingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDishRatingHook registers your hook function for all future operations.
func AddDishRatingHook(hookPoint boil.HookPoint, dishRatingHook DishRatingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dishRatingAfterSelectHooks = append(dishRatingAfterSelectHooks, dishRatingHook)
	case boil.BeforeInsertHook:
		dishRatingBeforeInsertHooks = append(dishRatingBeforeInsertHooks, dishRatingHook)
	case boil.AfterInsertHook:
		dishRatingAfterInsertHooks = append(dishRatingAfterInsertHooks, dishRatingHook)
	case boil.BeforeUpdateHook:
		dishRatingBeforeUpdateHooks = append(dishRatingBeforeUpdateHooks, dishRatingHook)
	case boil.AfterUpdateHook:
		dishRatingAfterUpdateHooks = append(dishRatingAfterUpdateHooks, dishRatingHook)
	case boil.BeforeDeleteHook:
		dishRatingBeforeDeleteHooks = append(dishRatingBeforeDeleteHooks, dishRatingHook)
	case boil.AfterDeleteHook:
		dishRatingAfterDeleteHooks = append(dishRatingAfterDeleteHooks, dishRatingHook)
	case boil.BeforeUpsertHook:
		dishRatingBeforeUpsertHooks = append(dishRatingBeforeUpsertHooks, dishRatingHook)
	case boil.AfterUpsertHook:
		dishRatingAfterUpsertHooks = append(dishRatingAfterUpsertHooks, dishRatingHook)
	}
}

// One returns a single dishRating record from the query.
func (q dishRatingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DishRating, error) {
	o := &DishRating{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to execute a one query for dish_ratings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DishRating records from the query.
func (q dishRatingQuery) All(ctx context.Context, exec boil.ContextExecutor) (DishRatingSlice, error) {
	var o []*DishRating

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to assign all query results to DishRating slice")
	}

	if len(dishRatingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DishRating records in the query.
func (q dishRatingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to count dish_ratings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dishRatingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: failed to check if dish_ratings exists")
	}

	return count > 0, nil
}

// Dish pointed to by the foreign key.
func (o *DishRating) Dish(mods ...qm.QueryMod) dishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DishID),
	}

	queryMods = append(queryMods, mods...)

	return Dishes(queryMods...)
}

// User pointed to by the foreign key.
func (o *DishRating) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishRatingL) LoadDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDishRating interface{}, mods queries.Applicator) error {
	var slice []*DishRating
	var object *DishRating

	if singular {
		var ok bool
		object, ok = maybeDishRating.(*DishRating)
		if !ok {
			object = new(DishRating)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDishRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDishRating))
			}
		}
	} else {
		s, ok := maybeDishRating.(*[]*DishRating)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDishRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDishRating))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishRatingR{}
		}
		args = append(args, object.DishID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishRatingR{}
			}

			for _, a := range args {
				if a == obj.DishID {
					continue Outer
				}
			}

			args = append(args, obj.DishID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dish")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishRatingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dish = foreign
		if foreign.R == nil {
			foreign.R = &dishR{}
		}
		foreign.R.DishRatings = append(foreign.R.DishRatings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DishID == foreign.ID {
				local.R.Dish = foreign
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.DishRatings = append(foreign.R.DishRatings, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishRatingL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDishRating interface{}, mods queries.Applicator) error {
	var slice []*DishRating
	var object *DishRating

	if singular {
		var ok bool
		object, ok = maybeDishRating.(*DishRating)
		if !ok {
			object = new(DishRating)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDishRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDishRating))
			}
		}
	} else {
		s, ok := maybeDishRating.(*[]*DishRating)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDishRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDishRating))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dishRatingR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishRatingR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(dishRatingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DishRatings = append(foreign.R.DishRatings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DishRatings = append(foreign.R.DishRatings, local)
				break
			}
		}
	}

	return nil
}

// SetDish of the dishRating to the related item.
// Sets o.R.Dish to related.
// Adds o to related.R.DishRatings.
func (o *DishRating) SetDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dish_ratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishRatingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DishID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DishID = related.ID
	if o.R == nil {
		o.R = &dishRatingR{
			Dish: related,
		}
	} else {
		o.R.Dish = related
	}

	if related.R == nil {
		related.R = &dishR{
			DishRatings: DishRatingSlice{o},
		}
	} else {
		related.R.DishRatings = append(related.R.DishRatings, o)
	}

	return nil
}

// SetUser of the dishRating to the related item.
// Sets o.R.User to related.
// Adds o to related.R.DishRatings.
func (o *DishRating) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dish_ratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishRatingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DishID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &dishRatingR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			DishRatings: DishRatingSlice{o},
		}
	} else {
		related.R.DishRatings = append(related.R.DishRatings, o)
	}

	return nil
}

// DishRatings retrieves all the records using an executor.
func DishRatings(mods ...qm.QueryMod) dishRatingQuery {
	mods = append(mods, qm.From("\"dish_ratings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dish_ratings\".*"})
	}

	return dishRatingQuery{q}
}

// FindDishRating retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDishRating(ctx context.Context, exec boil.ContextExecutor, dishID int, userID int, selectCols ...string) (*DishRating, error) {
	dishRatingObj := &DishRating{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dish_ratings\" where \"dish_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(query, dishID, userID)

	err := q.Bind(ctx, exec, dishRatingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: unable to select from dish_ratings")
	}

	if err = dishRatingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dishRatingObj, err
	}

	return dishRatingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DishRating) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no dish_ratings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishRatingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dishRatingInsertCacheMut.RLock()
	cache, cached := dishRatingInsertCache[key]
	dishRatingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dishRatingAllColumns,
			dishRatingColumnsWithDefault,
			dishRatingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dishRatingType, dishRatingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dishRatingType, dishRatingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dish_ratings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dish_ratings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to insert into dish_ratings")
	}

	if !cached {
		dishRatingInsertCacheMut.Lock()
		dishRatingInsertCache[key] = cache
		dishRatingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DishRating.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DishRating) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dishRatingUpdateCacheMut.RLock()
	cache, cached := dishRatingUpdateCache[key]
	dishRatingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dishRatingAllColumns,
			dishRatingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboilerPSQL: unable to update dish_ratings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dish_ratings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dishRatingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dishRatingType, dishRatingMapping, append(wl, dishRatingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update dish_ratings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by update for dish_ratings")
	}

	if !cached {
		dishRatingUpdateCacheMut.Lock()
		dishRatingUpdateCache[key] = cache
		dishRatingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dishRatingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all for dish_ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected for dish_ratings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DishRatingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboilerPSQL: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishRatingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dish_ratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dishRatingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all in dishRating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected all in update all dishRating")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DishRating) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no dish_ratings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishRatingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dishRatingUpsertCacheMut.RLock()
	cache, cached := dishRatingUpsertCache[key]
	dishRatingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dishRatingAllColumns,
			dishRatingColumnsWithDefault,
			dishRatingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dishRatingAllColumns,
			dishRatingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboilerPSQL: unable to upsert dish_ratings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dishRatingPrimaryKeyColumns))
			copy(conflict, dishRatingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dish_ratings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dishRatingType, dishRatingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dishRatingType, dishRatingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to upsert dish_ratings")
	}

	if !cached {
		dishRatingUpsertCacheMut.Lock()
		dishRatingUpsertCache[key] = cache
		dishRatingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DishRating record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DishRating) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboilerPSQL: no DishRating provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dishRatingPrimaryKeyMapping)
	sql := "DELETE FROM \"dish_ratings\" WHERE \"dish_id\"=$1 AND \"user_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete from dish_ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by delete for dish_ratings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dishRatingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboilerPSQL: no dishRatingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from dish_ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for dish_ratings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DishRatingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dishRatingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishRatingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dish_ratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishRatingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from dishRating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for dish_ratings")
	}

	if len(dishRatingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DishRating) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDishRating(ctx, exec, o.DishID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DishRatingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DishRatingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishRatingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dish_ratings\".* FROM \"dish_ratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishRatingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to reload all in DishRatingSlice")
	}

	*o = slice

	return nil
}

// DishRatingExists checks if the DishRating row exists.
func DishRatingExists(ctx context.Context, exec boil.ContextExecutor, dishID int, userID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dish_ratings\" where \"dish_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dishID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, dishID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: unable to check if dish_ratings exists")
	}

	return exists, nil
}

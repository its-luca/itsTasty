// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrences)
	t.Run("DishRatings", testDishRatings)
	t.Run("Dishes", testDishes)
	t.Run("Locations", testLocations)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesDelete)
	t.Run("DishRatings", testDishRatingsDelete)
	t.Run("Dishes", testDishesDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesQueryDeleteAll)
	t.Run("DishRatings", testDishRatingsQueryDeleteAll)
	t.Run("Dishes", testDishesQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesSliceDeleteAll)
	t.Run("DishRatings", testDishRatingsSliceDeleteAll)
	t.Run("Dishes", testDishesSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesExists)
	t.Run("DishRatings", testDishRatingsExists)
	t.Run("Dishes", testDishesExists)
	t.Run("Locations", testLocationsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesFind)
	t.Run("DishRatings", testDishRatingsFind)
	t.Run("Dishes", testDishesFind)
	t.Run("Locations", testLocationsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesBind)
	t.Run("DishRatings", testDishRatingsBind)
	t.Run("Dishes", testDishesBind)
	t.Run("Locations", testLocationsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesOne)
	t.Run("DishRatings", testDishRatingsOne)
	t.Run("Dishes", testDishesOne)
	t.Run("Locations", testLocationsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesAll)
	t.Run("DishRatings", testDishRatingsAll)
	t.Run("Dishes", testDishesAll)
	t.Run("Locations", testLocationsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesCount)
	t.Run("DishRatings", testDishRatingsCount)
	t.Run("Dishes", testDishesCount)
	t.Run("Locations", testLocationsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesHooks)
	t.Run("DishRatings", testDishRatingsHooks)
	t.Run("Dishes", testDishesHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesInsert)
	t.Run("DishOccurrences", testDishOccurrencesInsertWhitelist)
	t.Run("DishRatings", testDishRatingsInsert)
	t.Run("DishRatings", testDishRatingsInsertWhitelist)
	t.Run("Dishes", testDishesInsert)
	t.Run("Dishes", testDishesInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DishOccurrenceToDishUsingDish", testDishOccurrenceToOneDishUsingDish)
	t.Run("DishRatingToDishUsingDish", testDishRatingToOneDishUsingDish)
	t.Run("DishRatingToUserUsingUser", testDishRatingToOneUserUsingUser)
	t.Run("DishToLocationUsingLocation", testDishToOneLocationUsingLocation)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DishToDishOccurrences", testDishToManyDishOccurrences)
	t.Run("DishToDishRatings", testDishToManyDishRatings)
	t.Run("LocationToDishes", testLocationToManyDishes)
	t.Run("UserToDishRatings", testUserToManyDishRatings)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DishOccurrenceToDishUsingDishOccurrences", testDishOccurrenceToOneSetOpDishUsingDish)
	t.Run("DishRatingToDishUsingDishRatings", testDishRatingToOneSetOpDishUsingDish)
	t.Run("DishRatingToUserUsingDishRatings", testDishRatingToOneSetOpUserUsingUser)
	t.Run("DishToLocationUsingDishes", testDishToOneSetOpLocationUsingLocation)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DishToDishOccurrences", testDishToManyAddOpDishOccurrences)
	t.Run("DishToDishRatings", testDishToManyAddOpDishRatings)
	t.Run("LocationToDishes", testLocationToManyAddOpDishes)
	t.Run("UserToDishRatings", testUserToManyAddOpDishRatings)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesReload)
	t.Run("DishRatings", testDishRatingsReload)
	t.Run("Dishes", testDishesReload)
	t.Run("Locations", testLocationsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesReloadAll)
	t.Run("DishRatings", testDishRatingsReloadAll)
	t.Run("Dishes", testDishesReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesSelect)
	t.Run("DishRatings", testDishRatingsSelect)
	t.Run("Dishes", testDishesSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesUpdate)
	t.Run("DishRatings", testDishRatingsUpdate)
	t.Run("Dishes", testDishesUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DishOccurrences", testDishOccurrencesSliceUpdateAll)
	t.Run("DishRatings", testDishRatingsSliceUpdateAll)
	t.Run("Dishes", testDishesSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

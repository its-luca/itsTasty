// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilerPSQL

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MergedDish is an object representing the database table.
type MergedDish struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	LocationID int       `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *mergedDishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mergedDishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MergedDishColumns = struct {
	ID         string
	Name       string
	LocationID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Name:       "name",
	LocationID: "location_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var MergedDishTableColumns = struct {
	ID         string
	Name       string
	LocationID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "merged_dishes.id",
	Name:       "merged_dishes.name",
	LocationID: "merged_dishes.location_id",
	CreatedAt:  "merged_dishes.created_at",
	UpdatedAt:  "merged_dishes.updated_at",
}

// Generated where

var MergedDishWhere = struct {
	ID         whereHelperint
	Name       whereHelperstring
	LocationID whereHelperint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperint{field: "\"merged_dishes\".\"id\""},
	Name:       whereHelperstring{field: "\"merged_dishes\".\"name\""},
	LocationID: whereHelperint{field: "\"merged_dishes\".\"location_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"merged_dishes\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"merged_dishes\".\"updated_at\""},
}

// MergedDishRels is where relationship names are stored.
var MergedDishRels = struct {
	Location string
	Dishes   string
}{
	Location: "Location",
	Dishes:   "Dishes",
}

// mergedDishR is where relationships are stored.
type mergedDishR struct {
	Location *Location `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
	Dishes   DishSlice `boil:"Dishes" json:"Dishes" toml:"Dishes" yaml:"Dishes"`
}

// NewStruct creates a new relationship struct
func (*mergedDishR) NewStruct() *mergedDishR {
	return &mergedDishR{}
}

func (r *mergedDishR) GetLocation() *Location {
	if r == nil {
		return nil
	}
	return r.Location
}

func (r *mergedDishR) GetDishes() DishSlice {
	if r == nil {
		return nil
	}
	return r.Dishes
}

// mergedDishL is where Load methods for each relationship are stored.
type mergedDishL struct{}

var (
	mergedDishAllColumns            = []string{"id", "name", "location_id", "created_at", "updated_at"}
	mergedDishColumnsWithoutDefault = []string{"name", "location_id", "created_at"}
	mergedDishColumnsWithDefault    = []string{"id", "updated_at"}
	mergedDishPrimaryKeyColumns     = []string{"id"}
	mergedDishGeneratedColumns      = []string{}
)

type (
	// MergedDishSlice is an alias for a slice of pointers to MergedDish.
	// This should almost always be used instead of []MergedDish.
	MergedDishSlice []*MergedDish
	// MergedDishHook is the signature for custom MergedDish hook methods
	MergedDishHook func(context.Context, boil.ContextExecutor, *MergedDish) error

	mergedDishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mergedDishType                 = reflect.TypeOf(&MergedDish{})
	mergedDishMapping              = queries.MakeStructMapping(mergedDishType)
	mergedDishPrimaryKeyMapping, _ = queries.BindMapping(mergedDishType, mergedDishMapping, mergedDishPrimaryKeyColumns)
	mergedDishInsertCacheMut       sync.RWMutex
	mergedDishInsertCache          = make(map[string]insertCache)
	mergedDishUpdateCacheMut       sync.RWMutex
	mergedDishUpdateCache          = make(map[string]updateCache)
	mergedDishUpsertCacheMut       sync.RWMutex
	mergedDishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mergedDishAfterSelectHooks []MergedDishHook

var mergedDishBeforeInsertHooks []MergedDishHook
var mergedDishAfterInsertHooks []MergedDishHook

var mergedDishBeforeUpdateHooks []MergedDishHook
var mergedDishAfterUpdateHooks []MergedDishHook

var mergedDishBeforeDeleteHooks []MergedDishHook
var mergedDishAfterDeleteHooks []MergedDishHook

var mergedDishBeforeUpsertHooks []MergedDishHook
var mergedDishAfterUpsertHooks []MergedDishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MergedDish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MergedDish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MergedDish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MergedDish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MergedDish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MergedDish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MergedDish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MergedDish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MergedDish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mergedDishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMergedDishHook registers your hook function for all future operations.
func AddMergedDishHook(hookPoint boil.HookPoint, mergedDishHook MergedDishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mergedDishAfterSelectHooks = append(mergedDishAfterSelectHooks, mergedDishHook)
	case boil.BeforeInsertHook:
		mergedDishBeforeInsertHooks = append(mergedDishBeforeInsertHooks, mergedDishHook)
	case boil.AfterInsertHook:
		mergedDishAfterInsertHooks = append(mergedDishAfterInsertHooks, mergedDishHook)
	case boil.BeforeUpdateHook:
		mergedDishBeforeUpdateHooks = append(mergedDishBeforeUpdateHooks, mergedDishHook)
	case boil.AfterUpdateHook:
		mergedDishAfterUpdateHooks = append(mergedDishAfterUpdateHooks, mergedDishHook)
	case boil.BeforeDeleteHook:
		mergedDishBeforeDeleteHooks = append(mergedDishBeforeDeleteHooks, mergedDishHook)
	case boil.AfterDeleteHook:
		mergedDishAfterDeleteHooks = append(mergedDishAfterDeleteHooks, mergedDishHook)
	case boil.BeforeUpsertHook:
		mergedDishBeforeUpsertHooks = append(mergedDishBeforeUpsertHooks, mergedDishHook)
	case boil.AfterUpsertHook:
		mergedDishAfterUpsertHooks = append(mergedDishAfterUpsertHooks, mergedDishHook)
	}
}

// One returns a single mergedDish record from the query.
func (q mergedDishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MergedDish, error) {
	o := &MergedDish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to execute a one query for merged_dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MergedDish records from the query.
func (q mergedDishQuery) All(ctx context.Context, exec boil.ContextExecutor) (MergedDishSlice, error) {
	var o []*MergedDish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboilerPSQL: failed to assign all query results to MergedDish slice")
	}

	if len(mergedDishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MergedDish records in the query.
func (q mergedDishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to count merged_dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mergedDishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: failed to check if merged_dishes exists")
	}

	return count > 0, nil
}

// Location pointed to by the foreign key.
func (o *MergedDish) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	return Locations(queryMods...)
}

// Dishes retrieves all the dish's Dishes with an executor.
func (o *MergedDish) Dishes(mods ...qm.QueryMod) dishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dishes\".\"merged_dish_id\"=?", o.ID),
	)

	return Dishes(queryMods...)
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mergedDishL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMergedDish interface{}, mods queries.Applicator) error {
	var slice []*MergedDish
	var object *MergedDish

	if singular {
		var ok bool
		object, ok = maybeMergedDish.(*MergedDish)
		if !ok {
			object = new(MergedDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMergedDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMergedDish))
			}
		}
	} else {
		s, ok := maybeMergedDish.(*[]*MergedDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMergedDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMergedDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mergedDishR{}
		}
		args = append(args, object.LocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mergedDishR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(mergedDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.MergedDishes = append(foreign.R.MergedDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.MergedDishes = append(foreign.R.MergedDishes, local)
				break
			}
		}
	}

	return nil
}

// LoadDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mergedDishL) LoadDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMergedDish interface{}, mods queries.Applicator) error {
	var slice []*MergedDish
	var object *MergedDish

	if singular {
		var ok bool
		object, ok = maybeMergedDish.(*MergedDish)
		if !ok {
			object = new(MergedDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMergedDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMergedDish))
			}
		}
	} else {
		s, ok := maybeMergedDish.(*[]*MergedDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMergedDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMergedDish))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mergedDishR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mergedDishR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.merged_dish_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dishes")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Dishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dishR{}
			}
			foreign.R.MergedDish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MergedDishID) {
				local.R.Dishes = append(local.R.Dishes, foreign)
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.MergedDish = local
				break
			}
		}
	}

	return nil
}

// SetLocation of the mergedDish to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.MergedDishes.
func (o *MergedDish) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"merged_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, mergedDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &mergedDishR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			MergedDishes: MergedDishSlice{o},
		}
	} else {
		related.R.MergedDishes = append(related.R.MergedDishes, o)
	}

	return nil
}

// AddDishes adds the given related objects to the existing relationships
// of the merged_dish, optionally inserting them as new records.
// Appends related to o.R.Dishes.
// Sets related.R.MergedDish appropriately.
func (o *MergedDish) AddDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dish) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MergedDishID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"merged_dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, dishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MergedDishID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mergedDishR{
			Dishes: related,
		}
	} else {
		o.R.Dishes = append(o.R.Dishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dishR{
				MergedDish: o,
			}
		} else {
			rel.R.MergedDish = o
		}
	}
	return nil
}

// SetDishes removes all previously related items of the
// merged_dish replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MergedDish's Dishes accordingly.
// Replaces o.R.Dishes with related.
// Sets related.R.MergedDish's Dishes accordingly.
func (o *MergedDish) SetDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dish) error {
	query := "update \"dishes\" set \"merged_dish_id\" = null where \"merged_dish_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Dishes {
			queries.SetScanner(&rel.MergedDishID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MergedDish = nil
		}
		o.R.Dishes = nil
	}

	return o.AddDishes(ctx, exec, insert, related...)
}

// RemoveDishes relationships from objects passed in.
// Removes related items from R.Dishes (uses pointer comparison, removal does not keep order)
// Sets related.R.MergedDish.
func (o *MergedDish) RemoveDishes(ctx context.Context, exec boil.ContextExecutor, related ...*Dish) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MergedDishID, nil)
		if rel.R != nil {
			rel.R.MergedDish = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("merged_dish_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Dishes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Dishes)
			if ln > 1 && i < ln-1 {
				o.R.Dishes[i] = o.R.Dishes[ln-1]
			}
			o.R.Dishes = o.R.Dishes[:ln-1]
			break
		}
	}

	return nil
}

// MergedDishes retrieves all the records using an executor.
func MergedDishes(mods ...qm.QueryMod) mergedDishQuery {
	mods = append(mods, qm.From("\"merged_dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"merged_dishes\".*"})
	}

	return mergedDishQuery{q}
}

// FindMergedDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMergedDish(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MergedDish, error) {
	mergedDishObj := &MergedDish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"merged_dishes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mergedDishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilerPSQL: unable to select from merged_dishes")
	}

	if err = mergedDishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mergedDishObj, err
	}

	return mergedDishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MergedDish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no merged_dishes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mergedDishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mergedDishInsertCacheMut.RLock()
	cache, cached := mergedDishInsertCache[key]
	mergedDishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mergedDishAllColumns,
			mergedDishColumnsWithDefault,
			mergedDishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mergedDishType, mergedDishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mergedDishType, mergedDishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"merged_dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"merged_dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to insert into merged_dishes")
	}

	if !cached {
		mergedDishInsertCacheMut.Lock()
		mergedDishInsertCache[key] = cache
		mergedDishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MergedDish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MergedDish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mergedDishUpdateCacheMut.RLock()
	cache, cached := mergedDishUpdateCache[key]
	mergedDishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mergedDishAllColumns,
			mergedDishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboilerPSQL: unable to update merged_dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"merged_dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mergedDishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mergedDishType, mergedDishMapping, append(wl, mergedDishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update merged_dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by update for merged_dishes")
	}

	if !cached {
		mergedDishUpdateCacheMut.Lock()
		mergedDishUpdateCache[key] = cache
		mergedDishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mergedDishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all for merged_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected for merged_dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MergedDishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboilerPSQL: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergedDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"merged_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mergedDishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to update all in mergedDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to retrieve rows affected all in update all mergedDish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MergedDish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilerPSQL: no merged_dishes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mergedDishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mergedDishUpsertCacheMut.RLock()
	cache, cached := mergedDishUpsertCache[key]
	mergedDishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mergedDishAllColumns,
			mergedDishColumnsWithDefault,
			mergedDishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mergedDishAllColumns,
			mergedDishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboilerPSQL: unable to upsert merged_dishes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mergedDishPrimaryKeyColumns))
			copy(conflict, mergedDishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"merged_dishes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mergedDishType, mergedDishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mergedDishType, mergedDishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to upsert merged_dishes")
	}

	if !cached {
		mergedDishUpsertCacheMut.Lock()
		mergedDishUpsertCache[key] = cache
		mergedDishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MergedDish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MergedDish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboilerPSQL: no MergedDish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mergedDishPrimaryKeyMapping)
	sql := "DELETE FROM \"merged_dishes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete from merged_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by delete for merged_dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mergedDishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboilerPSQL: no mergedDishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from merged_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for merged_dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MergedDishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mergedDishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergedDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"merged_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mergedDishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: unable to delete all from mergedDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilerPSQL: failed to get rows affected by deleteall for merged_dishes")
	}

	if len(mergedDishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MergedDish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMergedDish(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MergedDishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MergedDishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergedDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"merged_dishes\".* FROM \"merged_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mergedDishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboilerPSQL: unable to reload all in MergedDishSlice")
	}

	*o = slice

	return nil
}

// MergedDishExists checks if the MergedDish row exists.
func MergedDishExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"merged_dishes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilerPSQL: unable to check if merged_dishes exists")
	}

	return exists, nil
}

// Package userAPI provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220812203637-fec990c8f823 DO NOT EDIT.
package userAPI

import (
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for GetDishRespRatingOfUser.
const (
	GetDishRespRatingOfUserN1 GetDishRespRatingOfUser = 1
	GetDishRespRatingOfUserN2 GetDishRespRatingOfUser = 2
	GetDishRespRatingOfUserN3 GetDishRespRatingOfUser = 3
	GetDishRespRatingOfUserN4 GetDishRespRatingOfUser = 4
	GetDishRespRatingOfUserN5 GetDishRespRatingOfUser = 5
)

// Defines values for RateDishReqRating.
const (
	RateDishReqRatingN1 RateDishReqRating = 1
	RateDishReqRatingN2 RateDishReqRating = 2
	RateDishReqRatingN3 RateDishReqRating = 3
	RateDishReqRatingN4 RateDishReqRating = 4
	RateDishReqRatingN5 RateDishReqRating = 5
)

// BasicError defines model for BasicError.
type BasicError struct {
	What *string `json:"what,omitempty"`
}

// GetAllDishesResponse Array with all known dish IDs
type GetAllDishesResponse = []int

// GetDishResp Detailed description of a dish
type GetDishResp struct {
	// AvgRating Average rating for this dish. Omitted if there are no votes yet
	AvgRating *float32 `json:"avgRating,omitempty"`

	// Name Name of the dish
	Name string `json:"name"`

	// OccurrenceCount Amount of times this dish occurred
	OccurrenceCount int `json:"occurrenceCount"`

	// RatingOfUser Rating for this dish of the requesting user. Omitted if the user has not rated yet.
	RatingOfUser *GetDishRespRatingOfUser `json:"ratingOfUser,omitempty"`

	// Ratings Ratings for this dish. Keys mean rating, values mean ratings with that amount of stars. If more than zero votes are present avgRating field contains the average rating.
	Ratings map[string]int `json:"ratings"`

	// RecentOccurrences Most recent occurrences of the dish. Might not contain the whole history
	RecentOccurrences []openapi_types.Date `json:"recentOccurrences"`
}

// GetDishRespRatingOfUser Rating for this dish of the requesting user. Omitted if the user has not rated yet.
type GetDishRespRatingOfUser int

// RateDishReq Request to vote for a dish
type RateDishReq struct {
	Rating RateDishReqRating `json:"rating"`
}

// RateDishReqRating defines model for RateDishReq.Rating.
type RateDishReqRating int

// SearchDishReq Request to lookup a dishID by the dish name
type SearchDishReq struct {
	// DishName Dish to search for
	DishName string `json:"dishName"`
}

// SearchDishResp Contains the dishID the requested dish
type SearchDishResp struct {
	// DishID ID of the searched dish if it was found. Omitted otherwise
	DishID *int `json:"dishID,omitempty"`

	// DishName Name of the searched ish
	DishName interface{} `json:"dishName"`

	// FoundDish True if the dish was found
	FoundDish bool `json:"foundDish"`
}

// PostDishesDishIDJSONRequestBody defines body for PostDishesDishID for application/json ContentType.
type PostDishesDishIDJSONRequestBody = RateDishReq

// PostSearchDishJSONRequestBody defines body for PostSearchDish for application/json ContentType.
type PostSearchDishJSONRequestBody = SearchDishReq

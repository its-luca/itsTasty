// Package userAPI provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package userAPI

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDishesMergeCandidatesDishID request
	GetDishesMergeCandidatesDishID(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDishesDishID request
	GetDishesDishID(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDishesDishID request with any body
	PostDishesDishIDWithBody(ctx context.Context, dishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDishesDishID(ctx context.Context, dishID int64, body PostDishesDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetAllDishes request
	GetGetAllDishes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMergedDishes request with any body
	PostMergedDishesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMergedDishes(ctx context.Context, body PostMergedDishesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMergedDishesMergedDishID request
	DeleteMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMergedDishesMergedDishID request
	GetMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMergedDishesMergedDishID request with any body
	PatchMergedDishesMergedDishIDWithBody(ctx context.Context, mergedDishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, body PatchMergedDishesMergedDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchDish request with any body
	PostSearchDishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchDish(ctx context.Context, body PostSearchDishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchDishByDate request with any body
	PostSearchDishByDateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchDishByDate(ctx context.Context, body PostSearchDishByDateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDishesMergeCandidatesDishID(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDishesMergeCandidatesDishIDRequest(c.Server, dishID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDishesDishID(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDishesDishIDRequest(c.Server, dishID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDishesDishIDWithBody(ctx context.Context, dishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDishesDishIDRequestWithBody(c.Server, dishID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDishesDishID(ctx context.Context, dishID int64, body PostDishesDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDishesDishIDRequest(c.Server, dishID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetAllDishes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetAllDishesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMergedDishesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMergedDishesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMergedDishes(ctx context.Context, body PostMergedDishesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMergedDishesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMergedDishesMergedDishIDRequest(c.Server, mergedDishID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMergedDishesMergedDishIDRequest(c.Server, mergedDishID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMergedDishesMergedDishIDWithBody(ctx context.Context, mergedDishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMergedDishesMergedDishIDRequestWithBody(c.Server, mergedDishID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMergedDishesMergedDishID(ctx context.Context, mergedDishID int64, body PatchMergedDishesMergedDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMergedDishesMergedDishIDRequest(c.Server, mergedDishID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchDishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchDishRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchDish(ctx context.Context, body PostSearchDishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchDishRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchDishByDateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchDishByDateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchDishByDate(ctx context.Context, body PostSearchDishByDateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchDishByDateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDishesMergeCandidatesDishIDRequest generates requests for GetDishesMergeCandidatesDishID
func NewGetDishesMergeCandidatesDishIDRequest(server string, dishID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dishID", runtime.ParamLocationPath, dishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dishes/mergeCandidates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDishesDishIDRequest generates requests for GetDishesDishID
func NewGetDishesDishIDRequest(server string, dishID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dishID", runtime.ParamLocationPath, dishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDishesDishIDRequest calls the generic PostDishesDishID builder with application/json body
func NewPostDishesDishIDRequest(server string, dishID int64, body PostDishesDishIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDishesDishIDRequestWithBody(server, dishID, "application/json", bodyReader)
}

// NewPostDishesDishIDRequestWithBody generates requests for PostDishesDishID with any type of body
func NewPostDishesDishIDRequestWithBody(server string, dishID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dishID", runtime.ParamLocationPath, dishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGetAllDishesRequest generates requests for GetGetAllDishes
func NewGetGetAllDishesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getAllDishes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMergedDishesRequest calls the generic PostMergedDishes builder with application/json body
func NewPostMergedDishesRequest(server string, body PostMergedDishesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMergedDishesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMergedDishesRequestWithBody generates requests for PostMergedDishes with any type of body
func NewPostMergedDishesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mergedDishes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMergedDishesMergedDishIDRequest generates requests for DeleteMergedDishesMergedDishID
func NewDeleteMergedDishesMergedDishIDRequest(server string, mergedDishID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, mergedDishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mergedDishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMergedDishesMergedDishIDRequest generates requests for GetMergedDishesMergedDishID
func NewGetMergedDishesMergedDishIDRequest(server string, mergedDishID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, mergedDishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mergedDishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMergedDishesMergedDishIDRequest calls the generic PatchMergedDishesMergedDishID builder with application/json body
func NewPatchMergedDishesMergedDishIDRequest(server string, mergedDishID int64, body PatchMergedDishesMergedDishIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMergedDishesMergedDishIDRequestWithBody(server, mergedDishID, "application/json", bodyReader)
}

// NewPatchMergedDishesMergedDishIDRequestWithBody generates requests for PatchMergedDishesMergedDishID with any type of body
func NewPatchMergedDishesMergedDishIDRequestWithBody(server string, mergedDishID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, mergedDishID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mergedDishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchDishRequest calls the generic PostSearchDish builder with application/json body
func NewPostSearchDishRequest(server string, body PostSearchDishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchDishRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSearchDishRequestWithBody generates requests for PostSearchDish with any type of body
func NewPostSearchDishRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchDish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchDishByDateRequest calls the generic PostSearchDishByDate builder with application/json body
func NewPostSearchDishByDateRequest(server string, body PostSearchDishByDateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchDishByDateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSearchDishByDateRequestWithBody generates requests for PostSearchDishByDate with any type of body
func NewPostSearchDishByDateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchDish/byDate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDishesMergeCandidatesDishID request
	GetDishesMergeCandidatesDishIDWithResponse(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*GetDishesMergeCandidatesDishIDResponse, error)

	// GetDishesDishID request
	GetDishesDishIDWithResponse(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*GetDishesDishIDResponse, error)

	// PostDishesDishID request with any body
	PostDishesDishIDWithBodyWithResponse(ctx context.Context, dishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDishesDishIDResponse, error)

	PostDishesDishIDWithResponse(ctx context.Context, dishID int64, body PostDishesDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDishesDishIDResponse, error)

	// GetGetAllDishes request
	GetGetAllDishesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGetAllDishesResponse, error)

	// PostMergedDishes request with any body
	PostMergedDishesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMergedDishesResponse, error)

	PostMergedDishesWithResponse(ctx context.Context, body PostMergedDishesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMergedDishesResponse, error)

	// DeleteMergedDishesMergedDishID request
	DeleteMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*DeleteMergedDishesMergedDishIDResponse, error)

	// GetMergedDishesMergedDishID request
	GetMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*GetMergedDishesMergedDishIDResponse, error)

	// PatchMergedDishesMergedDishID request with any body
	PatchMergedDishesMergedDishIDWithBodyWithResponse(ctx context.Context, mergedDishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMergedDishesMergedDishIDResponse, error)

	PatchMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, body PatchMergedDishesMergedDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMergedDishesMergedDishIDResponse, error)

	// PostSearchDish request with any body
	PostSearchDishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchDishResponse, error)

	PostSearchDishWithResponse(ctx context.Context, body PostSearchDishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchDishResponse, error)

	// PostSearchDishByDate request with any body
	PostSearchDishByDateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchDishByDateResponse, error)

	PostSearchDishByDateWithResponse(ctx context.Context, body PostSearchDishByDateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchDishByDateResponse, error)

	// GetUsersMe request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)
}

type GetDishesMergeCandidatesDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMergeCandidatesResp
}

// Status returns HTTPResponse.Status
func (r GetDishesMergeCandidatesDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDishesMergeCandidatesDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDishesDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDishResp
	JSON400      *BasicError
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r GetDishesDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDishesDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDishesDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BasicError
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r PostDishesDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDishesDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetAllDishesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllDishesResponse
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r GetGetAllDishesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetAllDishesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMergedDishesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateMergedDishResp
	JSON400      *BasicError
}

// Status returns HTTPResponse.Status
func (r PostMergedDishesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMergedDishesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMergedDishesMergedDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BasicError
}

// Status returns HTTPResponse.Status
func (r DeleteMergedDishesMergedDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMergedDishesMergedDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMergedDishesMergedDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MergedDishManagementData
}

// Status returns HTTPResponse.Status
func (r GetMergedDishesMergedDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMergedDishesMergedDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMergedDishesMergedDishIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BasicError
}

// Status returns HTTPResponse.Status
func (r PatchMergedDishesMergedDishIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMergedDishesMergedDishIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchDishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchDishResp
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r PostSearchDishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchDishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchDishByDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int64
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r PostSearchDishByDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchDishByDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUsersMeResp
	JSON500      *BasicError
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDishesMergeCandidatesDishIDWithResponse request returning *GetDishesMergeCandidatesDishIDResponse
func (c *ClientWithResponses) GetDishesMergeCandidatesDishIDWithResponse(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*GetDishesMergeCandidatesDishIDResponse, error) {
	rsp, err := c.GetDishesMergeCandidatesDishID(ctx, dishID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDishesMergeCandidatesDishIDResponse(rsp)
}

// GetDishesDishIDWithResponse request returning *GetDishesDishIDResponse
func (c *ClientWithResponses) GetDishesDishIDWithResponse(ctx context.Context, dishID int64, reqEditors ...RequestEditorFn) (*GetDishesDishIDResponse, error) {
	rsp, err := c.GetDishesDishID(ctx, dishID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDishesDishIDResponse(rsp)
}

// PostDishesDishIDWithBodyWithResponse request with arbitrary body returning *PostDishesDishIDResponse
func (c *ClientWithResponses) PostDishesDishIDWithBodyWithResponse(ctx context.Context, dishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDishesDishIDResponse, error) {
	rsp, err := c.PostDishesDishIDWithBody(ctx, dishID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDishesDishIDResponse(rsp)
}

func (c *ClientWithResponses) PostDishesDishIDWithResponse(ctx context.Context, dishID int64, body PostDishesDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDishesDishIDResponse, error) {
	rsp, err := c.PostDishesDishID(ctx, dishID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDishesDishIDResponse(rsp)
}

// GetGetAllDishesWithResponse request returning *GetGetAllDishesResponse
func (c *ClientWithResponses) GetGetAllDishesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGetAllDishesResponse, error) {
	rsp, err := c.GetGetAllDishes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetAllDishesResponse(rsp)
}

// PostMergedDishesWithBodyWithResponse request with arbitrary body returning *PostMergedDishesResponse
func (c *ClientWithResponses) PostMergedDishesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMergedDishesResponse, error) {
	rsp, err := c.PostMergedDishesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMergedDishesResponse(rsp)
}

func (c *ClientWithResponses) PostMergedDishesWithResponse(ctx context.Context, body PostMergedDishesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMergedDishesResponse, error) {
	rsp, err := c.PostMergedDishes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMergedDishesResponse(rsp)
}

// DeleteMergedDishesMergedDishIDWithResponse request returning *DeleteMergedDishesMergedDishIDResponse
func (c *ClientWithResponses) DeleteMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*DeleteMergedDishesMergedDishIDResponse, error) {
	rsp, err := c.DeleteMergedDishesMergedDishID(ctx, mergedDishID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMergedDishesMergedDishIDResponse(rsp)
}

// GetMergedDishesMergedDishIDWithResponse request returning *GetMergedDishesMergedDishIDResponse
func (c *ClientWithResponses) GetMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, reqEditors ...RequestEditorFn) (*GetMergedDishesMergedDishIDResponse, error) {
	rsp, err := c.GetMergedDishesMergedDishID(ctx, mergedDishID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMergedDishesMergedDishIDResponse(rsp)
}

// PatchMergedDishesMergedDishIDWithBodyWithResponse request with arbitrary body returning *PatchMergedDishesMergedDishIDResponse
func (c *ClientWithResponses) PatchMergedDishesMergedDishIDWithBodyWithResponse(ctx context.Context, mergedDishID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMergedDishesMergedDishIDResponse, error) {
	rsp, err := c.PatchMergedDishesMergedDishIDWithBody(ctx, mergedDishID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMergedDishesMergedDishIDResponse(rsp)
}

func (c *ClientWithResponses) PatchMergedDishesMergedDishIDWithResponse(ctx context.Context, mergedDishID int64, body PatchMergedDishesMergedDishIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMergedDishesMergedDishIDResponse, error) {
	rsp, err := c.PatchMergedDishesMergedDishID(ctx, mergedDishID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMergedDishesMergedDishIDResponse(rsp)
}

// PostSearchDishWithBodyWithResponse request with arbitrary body returning *PostSearchDishResponse
func (c *ClientWithResponses) PostSearchDishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchDishResponse, error) {
	rsp, err := c.PostSearchDishWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchDishResponse(rsp)
}

func (c *ClientWithResponses) PostSearchDishWithResponse(ctx context.Context, body PostSearchDishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchDishResponse, error) {
	rsp, err := c.PostSearchDish(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchDishResponse(rsp)
}

// PostSearchDishByDateWithBodyWithResponse request with arbitrary body returning *PostSearchDishByDateResponse
func (c *ClientWithResponses) PostSearchDishByDateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchDishByDateResponse, error) {
	rsp, err := c.PostSearchDishByDateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchDishByDateResponse(rsp)
}

func (c *ClientWithResponses) PostSearchDishByDateWithResponse(ctx context.Context, body PostSearchDishByDateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchDishByDateResponse, error) {
	rsp, err := c.PostSearchDishByDate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchDishByDateResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// ParseGetDishesMergeCandidatesDishIDResponse parses an HTTP response from a GetDishesMergeCandidatesDishIDWithResponse call
func ParseGetDishesMergeCandidatesDishIDResponse(rsp *http.Response) (*GetDishesMergeCandidatesDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDishesMergeCandidatesDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMergeCandidatesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDishesDishIDResponse parses an HTTP response from a GetDishesDishIDWithResponse call
func ParseGetDishesDishIDResponse(rsp *http.Response) (*GetDishesDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDishesDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDishResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDishesDishIDResponse parses an HTTP response from a PostDishesDishIDWithResponse call
func ParsePostDishesDishIDResponse(rsp *http.Response) (*PostDishesDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDishesDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGetAllDishesResponse parses an HTTP response from a GetGetAllDishesWithResponse call
func ParseGetGetAllDishesResponse(rsp *http.Response) (*GetGetAllDishesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetAllDishesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllDishesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMergedDishesResponse parses an HTTP response from a PostMergedDishesWithResponse call
func ParsePostMergedDishesResponse(rsp *http.Response) (*PostMergedDishesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMergedDishesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateMergedDishResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteMergedDishesMergedDishIDResponse parses an HTTP response from a DeleteMergedDishesMergedDishIDWithResponse call
func ParseDeleteMergedDishesMergedDishIDResponse(rsp *http.Response) (*DeleteMergedDishesMergedDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMergedDishesMergedDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMergedDishesMergedDishIDResponse parses an HTTP response from a GetMergedDishesMergedDishIDWithResponse call
func ParseGetMergedDishesMergedDishIDResponse(rsp *http.Response) (*GetMergedDishesMergedDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMergedDishesMergedDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MergedDishManagementData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMergedDishesMergedDishIDResponse parses an HTTP response from a PatchMergedDishesMergedDishIDWithResponse call
func ParsePatchMergedDishesMergedDishIDResponse(rsp *http.Response) (*PatchMergedDishesMergedDishIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMergedDishesMergedDishIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSearchDishResponse parses an HTTP response from a PostSearchDishWithResponse call
func ParsePostSearchDishResponse(rsp *http.Response) (*PostSearchDishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchDishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchDishResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSearchDishByDateResponse parses an HTTP response from a PostSearchDishByDateWithResponse call
func ParsePostSearchDishByDateResponse(rsp *http.Response) (*PostSearchDishByDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchDishByDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUsersMeResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dishes/mergeCandidates/{dishID})
	GetDishesMergeCandidatesDishID(w http.ResponseWriter, r *http.Request, dishID int64)

	// (GET /dishes/{dishID})
	GetDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64)

	// (POST /dishes/{dishID})
	PostDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64)

	// (GET /getAllDishes)
	GetGetAllDishes(w http.ResponseWriter, r *http.Request)

	// (POST /mergedDishes/)
	PostMergedDishes(w http.ResponseWriter, r *http.Request)

	// (DELETE /mergedDishes/{mergedDishID})
	DeleteMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64)

	// (GET /mergedDishes/{mergedDishID})
	GetMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64)

	// (PATCH /mergedDishes/{mergedDishID})
	PatchMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64)

	// (POST /searchDish)
	PostSearchDish(w http.ResponseWriter, r *http.Request)

	// (POST /searchDish/byDate)
	PostSearchDishByDate(w http.ResponseWriter, r *http.Request)

	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDishesMergeCandidatesDishID operation middleware
func (siw *ServerInterfaceWrapper) GetDishesMergeCandidatesDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dishID" -------------
	var dishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "dishID", runtime.ParamLocationPath, chi.URLParam(r, "dishID"), &dishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesMergeCandidatesDishID(w, r, dishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesDishID operation middleware
func (siw *ServerInterfaceWrapper) GetDishesDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dishID" -------------
	var dishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "dishID", runtime.ParamLocationPath, chi.URLParam(r, "dishID"), &dishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesDishID(w, r, dishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDishesDishID operation middleware
func (siw *ServerInterfaceWrapper) PostDishesDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dishID" -------------
	var dishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "dishID", runtime.ParamLocationPath, chi.URLParam(r, "dishID"), &dishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDishesDishID(w, r, dishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGetAllDishes operation middleware
func (siw *ServerInterfaceWrapper) GetGetAllDishes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGetAllDishes(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostMergedDishes operation middleware
func (siw *ServerInterfaceWrapper) PostMergedDishes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMergedDishes(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMergedDishesMergedDishID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "mergedDishID" -------------
	var mergedDishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, chi.URLParam(r, "mergedDishID"), &mergedDishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mergedDishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMergedDishesMergedDishID(w, r, mergedDishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMergedDishesMergedDishID operation middleware
func (siw *ServerInterfaceWrapper) GetMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "mergedDishID" -------------
	var mergedDishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, chi.URLParam(r, "mergedDishID"), &mergedDishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mergedDishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMergedDishesMergedDishID(w, r, mergedDishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchMergedDishesMergedDishID operation middleware
func (siw *ServerInterfaceWrapper) PatchMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "mergedDishID" -------------
	var mergedDishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "mergedDishID", runtime.ParamLocationPath, chi.URLParam(r, "mergedDishID"), &mergedDishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mergedDishID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchMergedDishesMergedDishID(w, r, mergedDishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSearchDish operation middleware
func (siw *ServerInterfaceWrapper) PostSearchDish(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearchDish(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSearchDishByDate operation middleware
func (siw *ServerInterfaceWrapper) PostSearchDishByDate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearchDishByDate(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dishes/mergeCandidates/{dishID}", wrapper.GetDishesMergeCandidatesDishID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dishes/{dishID}", wrapper.GetDishesDishID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dishes/{dishID}", wrapper.PostDishesDishID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/getAllDishes", wrapper.GetGetAllDishes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mergedDishes/", wrapper.PostMergedDishes)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mergedDishes/{mergedDishID}", wrapper.DeleteMergedDishesMergedDishID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mergedDishes/{mergedDishID}", wrapper.GetMergedDishesMergedDishID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/mergedDishes/{mergedDishID}", wrapper.PatchMergedDishesMergedDishID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/searchDish", wrapper.PostSearchDish)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/searchDish/byDate", wrapper.PostSearchDishByDate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})

	return r
}

type GetDishesMergeCandidatesDishIDRequestObject struct {
	DishID int64 `json:"dishID"`
}

type GetDishesMergeCandidatesDishIDResponseObject interface {
	VisitGetDishesMergeCandidatesDishIDResponse(w http.ResponseWriter) error
}

type GetDishesMergeCandidatesDishID200JSONResponse GetMergeCandidatesResp

func (response GetDishesMergeCandidatesDishID200JSONResponse) VisitGetDishesMergeCandidatesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDishesMergeCandidatesDishID401Response struct {
}

func (response GetDishesMergeCandidatesDishID401Response) VisitGetDishesMergeCandidatesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDishesMergeCandidatesDishID404Response struct {
}

func (response GetDishesMergeCandidatesDishID404Response) VisitGetDishesMergeCandidatesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetDishesMergeCandidatesDishID500Response struct {
}

func (response GetDishesMergeCandidatesDishID500Response) VisitGetDishesMergeCandidatesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetDishesDishIDRequestObject struct {
	DishID int64 `json:"dishID"`
}

type GetDishesDishIDResponseObject interface {
	VisitGetDishesDishIDResponse(w http.ResponseWriter) error
}

type GetDishesDishID200JSONResponse GetDishResp

func (response GetDishesDishID200JSONResponse) VisitGetDishesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDishesDishID400JSONResponse BasicError

func (response GetDishesDishID400JSONResponse) VisitGetDishesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDishesDishID401Response struct {
}

func (response GetDishesDishID401Response) VisitGetDishesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDishesDishID404Response struct {
}

func (response GetDishesDishID404Response) VisitGetDishesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetDishesDishID500JSONResponse BasicError

func (response GetDishesDishID500JSONResponse) VisitGetDishesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostDishesDishIDRequestObject struct {
	DishID int64 `json:"dishID"`
	Body   *PostDishesDishIDJSONRequestBody
}

type PostDishesDishIDResponseObject interface {
	VisitPostDishesDishIDResponse(w http.ResponseWriter) error
}

type PostDishesDishID200Response struct {
}

func (response PostDishesDishID200Response) VisitPostDishesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostDishesDishID400JSONResponse BasicError

func (response PostDishesDishID400JSONResponse) VisitPostDishesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDishesDishID401Response struct {
}

func (response PostDishesDishID401Response) VisitPostDishesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostDishesDishID404Response struct {
}

func (response PostDishesDishID404Response) VisitPostDishesDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostDishesDishID500JSONResponse BasicError

func (response PostDishesDishID500JSONResponse) VisitPostDishesDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGetAllDishesRequestObject struct {
}

type GetGetAllDishesResponseObject interface {
	VisitGetGetAllDishesResponse(w http.ResponseWriter) error
}

type GetGetAllDishes200JSONResponse GetAllDishesResponse

func (response GetGetAllDishes200JSONResponse) VisitGetGetAllDishesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGetAllDishes401Response struct {
}

func (response GetGetAllDishes401Response) VisitGetGetAllDishesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetGetAllDishes500JSONResponse BasicError

func (response GetGetAllDishes500JSONResponse) VisitGetGetAllDishesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostMergedDishesRequestObject struct {
	Body *PostMergedDishesJSONRequestBody
}

type PostMergedDishesResponseObject interface {
	VisitPostMergedDishesResponse(w http.ResponseWriter) error
}

type PostMergedDishes200JSONResponse CreateMergedDishResp

func (response PostMergedDishes200JSONResponse) VisitPostMergedDishesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMergedDishes400JSONResponse BasicError

func (response PostMergedDishes400JSONResponse) VisitPostMergedDishesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostMergedDishes401Response struct {
}

func (response PostMergedDishes401Response) VisitPostMergedDishesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostMergedDishes500Response struct {
}

func (response PostMergedDishes500Response) VisitPostMergedDishesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteMergedDishesMergedDishIDRequestObject struct {
	MergedDishID int64 `json:"mergedDishID"`
}

type DeleteMergedDishesMergedDishIDResponseObject interface {
	VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error
}

type DeleteMergedDishesMergedDishID200Response struct {
}

func (response DeleteMergedDishesMergedDishID200Response) VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteMergedDishesMergedDishID400JSONResponse BasicError

func (response DeleteMergedDishesMergedDishID400JSONResponse) VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMergedDishesMergedDishID401Response struct {
}

func (response DeleteMergedDishesMergedDishID401Response) VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteMergedDishesMergedDishID404Response struct {
}

func (response DeleteMergedDishesMergedDishID404Response) VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteMergedDishesMergedDishID500Response struct {
}

func (response DeleteMergedDishesMergedDishID500Response) VisitDeleteMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetMergedDishesMergedDishIDRequestObject struct {
	MergedDishID int64 `json:"mergedDishID"`
}

type GetMergedDishesMergedDishIDResponseObject interface {
	VisitGetMergedDishesMergedDishIDResponse(w http.ResponseWriter) error
}

type GetMergedDishesMergedDishID200JSONResponse MergedDishManagementData

func (response GetMergedDishesMergedDishID200JSONResponse) VisitGetMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMergedDishesMergedDishID401Response struct {
}

func (response GetMergedDishesMergedDishID401Response) VisitGetMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetMergedDishesMergedDishID404Response struct {
}

func (response GetMergedDishesMergedDishID404Response) VisitGetMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMergedDishesMergedDishID500Response struct {
}

func (response GetMergedDishesMergedDishID500Response) VisitGetMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PatchMergedDishesMergedDishIDRequestObject struct {
	MergedDishID int64 `json:"mergedDishID"`
	Body         *PatchMergedDishesMergedDishIDJSONRequestBody
}

type PatchMergedDishesMergedDishIDResponseObject interface {
	VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error
}

type PatchMergedDishesMergedDishID200Response struct {
}

func (response PatchMergedDishesMergedDishID200Response) VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchMergedDishesMergedDishID400JSONResponse BasicError

func (response PatchMergedDishesMergedDishID400JSONResponse) VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchMergedDishesMergedDishID401Response struct {
}

func (response PatchMergedDishesMergedDishID401Response) VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PatchMergedDishesMergedDishID404Response struct {
}

func (response PatchMergedDishesMergedDishID404Response) VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchMergedDishesMergedDishID500Response struct {
}

func (response PatchMergedDishesMergedDishID500Response) VisitPatchMergedDishesMergedDishIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostSearchDishRequestObject struct {
	Body *PostSearchDishJSONRequestBody
}

type PostSearchDishResponseObject interface {
	VisitPostSearchDishResponse(w http.ResponseWriter) error
}

type PostSearchDish200JSONResponse SearchDishResp

func (response PostSearchDish200JSONResponse) VisitPostSearchDishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearchDish401Response struct {
}

func (response PostSearchDish401Response) VisitPostSearchDishResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostSearchDish500JSONResponse BasicError

func (response PostSearchDish500JSONResponse) VisitPostSearchDishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSearchDishByDateRequestObject struct {
	Body *PostSearchDishByDateJSONRequestBody
}

type PostSearchDishByDateResponseObject interface {
	VisitPostSearchDishByDateResponse(w http.ResponseWriter) error
}

type PostSearchDishByDate200JSONResponse []int64

func (response PostSearchDishByDate200JSONResponse) VisitPostSearchDishByDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearchDishByDate401Response struct {
}

func (response PostSearchDishByDate401Response) VisitPostSearchDishByDateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostSearchDishByDate500JSONResponse BasicError

func (response PostSearchDishByDate500JSONResponse) VisitPostSearchDishByDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse GetUsersMeResp

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401Response struct {
}

func (response GetUsersMe401Response) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetUsersMe500JSONResponse BasicError

func (response GetUsersMe500JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /dishes/mergeCandidates/{dishID})
	GetDishesMergeCandidatesDishID(ctx context.Context, request GetDishesMergeCandidatesDishIDRequestObject) (GetDishesMergeCandidatesDishIDResponseObject, error)

	// (GET /dishes/{dishID})
	GetDishesDishID(ctx context.Context, request GetDishesDishIDRequestObject) (GetDishesDishIDResponseObject, error)

	// (POST /dishes/{dishID})
	PostDishesDishID(ctx context.Context, request PostDishesDishIDRequestObject) (PostDishesDishIDResponseObject, error)

	// (GET /getAllDishes)
	GetGetAllDishes(ctx context.Context, request GetGetAllDishesRequestObject) (GetGetAllDishesResponseObject, error)

	// (POST /mergedDishes/)
	PostMergedDishes(ctx context.Context, request PostMergedDishesRequestObject) (PostMergedDishesResponseObject, error)

	// (DELETE /mergedDishes/{mergedDishID})
	DeleteMergedDishesMergedDishID(ctx context.Context, request DeleteMergedDishesMergedDishIDRequestObject) (DeleteMergedDishesMergedDishIDResponseObject, error)

	// (GET /mergedDishes/{mergedDishID})
	GetMergedDishesMergedDishID(ctx context.Context, request GetMergedDishesMergedDishIDRequestObject) (GetMergedDishesMergedDishIDResponseObject, error)

	// (PATCH /mergedDishes/{mergedDishID})
	PatchMergedDishesMergedDishID(ctx context.Context, request PatchMergedDishesMergedDishIDRequestObject) (PatchMergedDishesMergedDishIDResponseObject, error)

	// (POST /searchDish)
	PostSearchDish(ctx context.Context, request PostSearchDishRequestObject) (PostSearchDishResponseObject, error)

	// (POST /searchDish/byDate)
	PostSearchDishByDate(ctx context.Context, request PostSearchDishByDateRequestObject) (PostSearchDishByDateResponseObject, error)

	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDishesMergeCandidatesDishID operation middleware
func (sh *strictHandler) GetDishesMergeCandidatesDishID(w http.ResponseWriter, r *http.Request, dishID int64) {
	var request GetDishesMergeCandidatesDishIDRequestObject

	request.DishID = dishID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDishesMergeCandidatesDishID(ctx, request.(GetDishesMergeCandidatesDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDishesMergeCandidatesDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDishesMergeCandidatesDishIDResponseObject); ok {
		if err := validResponse.VisitGetDishesMergeCandidatesDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetDishesDishID operation middleware
func (sh *strictHandler) GetDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64) {
	var request GetDishesDishIDRequestObject

	request.DishID = dishID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDishesDishID(ctx, request.(GetDishesDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDishesDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDishesDishIDResponseObject); ok {
		if err := validResponse.VisitGetDishesDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostDishesDishID operation middleware
func (sh *strictHandler) PostDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64) {
	var request PostDishesDishIDRequestObject

	request.DishID = dishID

	var body PostDishesDishIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDishesDishID(ctx, request.(PostDishesDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDishesDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDishesDishIDResponseObject); ok {
		if err := validResponse.VisitPostDishesDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetGetAllDishes operation middleware
func (sh *strictHandler) GetGetAllDishes(w http.ResponseWriter, r *http.Request) {
	var request GetGetAllDishesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGetAllDishes(ctx, request.(GetGetAllDishesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGetAllDishes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGetAllDishesResponseObject); ok {
		if err := validResponse.VisitGetGetAllDishesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostMergedDishes operation middleware
func (sh *strictHandler) PostMergedDishes(w http.ResponseWriter, r *http.Request) {
	var request PostMergedDishesRequestObject

	var body PostMergedDishesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostMergedDishes(ctx, request.(PostMergedDishesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMergedDishes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostMergedDishesResponseObject); ok {
		if err := validResponse.VisitPostMergedDishesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteMergedDishesMergedDishID operation middleware
func (sh *strictHandler) DeleteMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64) {
	var request DeleteMergedDishesMergedDishIDRequestObject

	request.MergedDishID = mergedDishID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMergedDishesMergedDishID(ctx, request.(DeleteMergedDishesMergedDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMergedDishesMergedDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMergedDishesMergedDishIDResponseObject); ok {
		if err := validResponse.VisitDeleteMergedDishesMergedDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetMergedDishesMergedDishID operation middleware
func (sh *strictHandler) GetMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64) {
	var request GetMergedDishesMergedDishIDRequestObject

	request.MergedDishID = mergedDishID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMergedDishesMergedDishID(ctx, request.(GetMergedDishesMergedDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMergedDishesMergedDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMergedDishesMergedDishIDResponseObject); ok {
		if err := validResponse.VisitGetMergedDishesMergedDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PatchMergedDishesMergedDishID operation middleware
func (sh *strictHandler) PatchMergedDishesMergedDishID(w http.ResponseWriter, r *http.Request, mergedDishID int64) {
	var request PatchMergedDishesMergedDishIDRequestObject

	request.MergedDishID = mergedDishID

	var body PatchMergedDishesMergedDishIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchMergedDishesMergedDishID(ctx, request.(PatchMergedDishesMergedDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchMergedDishesMergedDishID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchMergedDishesMergedDishIDResponseObject); ok {
		if err := validResponse.VisitPatchMergedDishesMergedDishIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostSearchDish operation middleware
func (sh *strictHandler) PostSearchDish(w http.ResponseWriter, r *http.Request) {
	var request PostSearchDishRequestObject

	var body PostSearchDishJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearchDish(ctx, request.(PostSearchDishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearchDish")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchDishResponseObject); ok {
		if err := validResponse.VisitPostSearchDishResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostSearchDishByDate operation middleware
func (sh *strictHandler) PostSearchDishByDate(w http.ResponseWriter, r *http.Request) {
	var request PostSearchDishByDateRequestObject

	var body PostSearchDishByDateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearchDishByDate(ctx, request.(PostSearchDishByDateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearchDishByDate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchDishByDateResponseObject); ok {
		if err := validResponse.VisitPostSearchDishByDateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW5PbthX+K2fYPiQzCrWJnU5Gb+uVm6jNxh570xmP7QdIOJIQkwANgFJZj/575wC8",
	"iQRXlL1ynLRPu+IFOJfvfOcCfohWKs2URGlNNPsQmdUWU+b+fcKMWD3VWmn6lWmVobYC3b39lln6a4sM",
	"o1lkrBZyEx0Ok+qKWv6GKxsdJtGNkpYJiXwuzPaptLqgFzmalRaZFUpGs2gh10qnjH4BW6rcAhdmC6vq",
	"VRASUtQb5HQ9mnSkEby/pFtgMY8mkV86mkVC2r89jmoRhbS4QU0ySpZiWB2N73OhkUez1/6pCe32NqSn",
	"Rmbx1klJqr7A932pXuD7HI0Fq2DlngcGEvfQvNZTLq1v+d/HC15rzQpQa28wwQ3YLbNgtipPOCyxNFsM",
	"10ninkEDaW4s3TKod8iBWbBbBMNShEStvBfevAEmOayYlMo9nDFtaR8mC1B2i7pcuVw0Bri2kCAj5faq",
	"u1Wm1U5w5GQ+i6kZ8JfgZpzDyiuMtG878HjNX0gltXbqtaSN4ZYVJBW+z1lCvsB/C2OF3FRiL3MLa6WB",
	"wUbs0FmjtgzpjpCyAkrLMNmzB+yF3TZWJeniRo/74XXk73FAM1lf95f5aoXGgEaTKWnQ6dO85OFHjw7j",
	"bTEPROq8MqjEfVKUKOZt5cd4sKP60Z4hnX9Ee50k3iik7wCPuMtEFiSgRpMnFhxGQKPNNTHJsoDuYmSe",
	"0ZwyllLuN+Mz9w9LYC0w4RMQZFNhyig2TbSda9jToVDu0ofjJPKEcG37r/9coX/v0H8ka00jJxEuKP5L",
	"mNd7jXG381AvCXFmmXNVxSh/1biOZtFfpk1Om5YJbRpGUI9KOhK7LQYkHI69OVomEvJac9l7M5i+2G7z",
	"ghH9BOh9h5ptELS772K4tn0Mz1JhKfgcesgvTCNIBTtl0UCBLY/IPF2OAeZiDQbtxAVQF4xu5wfHIw7C",
	"Ua1WudYoV3ijchlA5XVK190yIkXTgmX5Kg9K5I35bP2rQd1f9FYZCxpXKG3Q7JXU2qdyup8b1F1vuIuw",
	"ZcalCe1IskBLaQBlnkaz199Ovps8mjyefP92WEiPD86Fp4vnR7jpv9QpNvwSXdQs5CrJORrIM8p9SqID",
	"DGSovdD0D4WnkJsY/okFOZ3J0hgT2LEkx6Nrpsp3zAKrfWIs0yaGxRpS5TiDSfgP6gqehNVMoyE71xHg",
	"+bAq/IwzJDuKgVYebaLRu+tZjRdzv1sbYJk2BmO4FZutdQ4rJXD39luVIGyFsUoXwxWMjwUoiqKI0zTm",
	"vB0fnFkMYbxbyHwKBY+tMLpxFbJfA8DTVO2qihsmuSAtTcWJxyS3qu+fQ9mBpccRd2u78VLXVUUnzwxw",
	"5VktBj38S5AK3TKla3r4GMvWLTCwRCPjxcfXEN0cWFU9tQoDFiU+NbcYzon9Fi9Aor3UiCkTyenOzD8W",
	"EqupeG+ZZBtMUdp5WTd0CKK+D/SAY81jw3UA3e5rQ4zT17jpZ32f0eaS+wIh0EJ/ag/0keVfZ5Xzyr96",
	"/boI7Nrwfg/+mlGkDvTVZSphTa11n/MYL2PKBIOqXMyVQQZhMffpinGOnHJmt6E80daO5YhxHu3I1+k7",
	"k4R6Uo30bimrMCFva0zVDj/CCv5FDmut0n5r3ZsC+BmAphCVMXXSdwo4JuhmH+5V99iECADmT39+evcU",
	"hDQWGSc/Pr++u/npIvYNDateMItjhjeuYPITgiC+dF3Pjyj2OmFSvhuKhZfI9GpLAj4p5sOxUIuZKPWO",
	"yjzWDH/KcCVOAgonUGUrmhSwFolF7ZtkVk88esq5Wqbf9LjFqDwRq+3R/GfLdghLRFluHsPffan06tWr",
	"V9/c3n4zn48plWp5hulpWYzY/iRPOQHuN/8Yw5PdwSdPEqzuqEru69cY4fLATWusAuM2J9Cdx93tBJB8",
	"eg1ZC3qiLmzbKlQP3LRL/NJKrYpgiLj5ybmUt1OdoNYgLOwZdUG55E2X5mZ2e+EmP59UvrXtW+9Noh9o",
	"4Vz6qW7vtTudY9UqeuquZGz2XyqVIJP3+aDZoe8Eek3ItQpsTo6/fr4gYlB742ovQyDTbiQtOewE7p1s",
	"llF5hsZ1SirXsMTE0X+K0rCmkLHCJrT54u4lfPWTynCdJ0nxNdwxYwug0pA2jCbRDrXxUlzF38VXrtHP",
	"ULJMRLPoUXwVPyKnM7t1/p76DabpcbU+/eCBcKBnNmhDwWhzLU3FBK43dUzAwIhUJEy7QHTKltPyTKsl",
	"WyZFMzav+tpmZkZYdCG04NGsmgKh6TQT86pkzphmKVrUJpq9/hAJkox0q0qg1kyxcbDVOU7KkxhS7HTB",
	"/pZe92MyZ7Xvrq6qEhX94IRlWSJ88E9/M55Emx3O78I8uoIjZ/Lo46tv+y5xIJCI3HiK3Ajpn308NGp1",
	"rbgPisMk+t5r1a2yLWrJEkCtlXaTeyGzvIx5IZEkPUxqIJ0Ezo9ogbsBnoFEvMN6xkFIaU8OjqdCwk1V",
	"qJGphj8G1L6akLgxSPPwmzeDQ94J7LGcVntuqHqRXund1Eh0S0gudoLnLDkB1T8ZNusMEwBkPYcVweaT",
	"lyz9+AElah2aBgR6wjgsHDrdYPnCgfIZFBoVfZMoUyZE0ZRs6uFbD7HPlfk9IevKkCeKFw9mynZzcTjO",
	"6STjIRwo93Ds54ft/H8ItpQ0Nq1To5OlBkGZmmSi9CSBd5L4vy6QenTcPpGKLkuS/cO0gFG8Gh3RSaFz",
	"Hf4F+rF9qD51E94gI920v8k4nh/1uem2fVB/GcYIfVMynjkuJMK9xV9cfmPQ9DTlFwK/J2PF8BKxxEiK",
	"xrANfiSmB+DnOmF9Hgo/tEf7B794gsHJip+W9Se4x5j0j7VReds+PBiTPdPjFy5Q9o0EjTfFHx00wczX",
	"VvWM9mYExCbDDU2KlvHAqUYM/8iN/9YpZZJtqv6l3Wj4cUJMPTxUXRSg5EpIa6iVsQo2aOs+Ce0qDuW7",
	"LxyZDwKwweOmC7fLlwRVxuwqMMDypzEOLeUXAcFTpk7epLW+KCA8fNIOHVh9YrnfJ8jcLf1/gjw7B5t6",
	"Lj1cBr6sR+3lBB+WRTW279eBzaT7QlXg8bHDZ67/OnP8h+OxL7BLaLAxXbrztTMhMq+m59WZGl1sHaPd",
	"hx1/oHdxBDXnhhfAUX1Ge/5Z7HA/4b9wd4P4lLJH9Zm2+9j9q7T8kjvNbPH1nwCCbnA89edMg9VceJzp",
	"vt2jqmzjJ80lkIKzh/JTnQuPHdofBAWM8i+WCA4GjRFKxlDOH0i5Uiv3SdAf3KfV2WxZ0fQPrhOw5RdQ",
	"/rloEuU6iWbR1tpsNp0SfyRbZezsh6sfrhxArp8vprtvo8Pbw38DAAD///45rQS/MwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

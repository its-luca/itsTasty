// Package botAPI provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220812203637-fec990c8f823 DO NOT EDIT.
package botAPI

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /createOrUpdateDish)
	PostCreateOrUpdateDish(w http.ResponseWriter, r *http.Request)

	// (GET /dishes/{dishID})
	GetDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostCreateOrUpdateDish operation middleware
func (siw *ServerInterfaceWrapper) PostCreateOrUpdateDish(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCreateOrUpdateDish(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDishesDishID operation middleware
func (siw *ServerInterfaceWrapper) GetDishesDishID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dishID" -------------
	var dishID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "dishID", runtime.ParamLocationPath, chi.URLParam(r, "dishID"), &dishID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dishID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDishesDishID(w, r, dishID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/createOrUpdateDish", wrapper.PostCreateOrUpdateDish)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dishes/{dishID}", wrapper.GetDishesDishID)
	})

	return r
}

type PostCreateOrUpdateDishRequestObject struct {
	Body *PostCreateOrUpdateDishJSONRequestBody
}

type PostCreateOrUpdateDish200JSONResponse CreateOrUpdateDishResp

func (t PostCreateOrUpdateDish200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((CreateOrUpdateDishResp)(t))
}

type PostCreateOrUpdateDish401Response struct {
}

type PostCreateOrUpdateDish500JSONResponse BasicError

func (t PostCreateOrUpdateDish500JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((BasicError)(t))
}

type GetDishesDishIDRequestObject struct {
	DishID int64 `json:"dishID"`
}

type GetDishesDishID200JSONResponse GetDishResp

func (t GetDishesDishID200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((GetDishResp)(t))
}

type GetDishesDishID400JSONResponse BasicError

func (t GetDishesDishID400JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((BasicError)(t))
}

type GetDishesDishID401Response struct {
}

type GetDishesDishID404Response struct {
}

type GetDishesDishID500JSONResponse BasicError

func (t GetDishesDishID500JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((BasicError)(t))
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /createOrUpdateDish)
	PostCreateOrUpdateDish(ctx context.Context, request PostCreateOrUpdateDishRequestObject) interface{}

	// (GET /dishes/{dishID})
	GetDishesDishID(ctx context.Context, request GetDishesDishIDRequestObject) interface{}
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostCreateOrUpdateDish operation middleware
func (sh *strictHandler) PostCreateOrUpdateDish(w http.ResponseWriter, r *http.Request) {
	var request PostCreateOrUpdateDishRequestObject

	var body PostCreateOrUpdateDishJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) interface{} {
		return sh.ssi.PostCreateOrUpdateDish(ctx, request.(PostCreateOrUpdateDishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCreateOrUpdateDish")
	}

	response := handler(r.Context(), w, r, request)

	switch v := response.(type) {
	case PostCreateOrUpdateDish200JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		writeJSON(w, v)
	case PostCreateOrUpdateDish401Response:
		w.WriteHeader(401)
	case PostCreateOrUpdateDish500JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		writeJSON(w, v)
	case error:
		sh.options.ResponseErrorHandlerFunc(w, r, v)
	case nil:
	default:
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", v))
	}
}

// GetDishesDishID operation middleware
func (sh *strictHandler) GetDishesDishID(w http.ResponseWriter, r *http.Request, dishID int64) {
	var request GetDishesDishIDRequestObject

	request.DishID = dishID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) interface{} {
		return sh.ssi.GetDishesDishID(ctx, request.(GetDishesDishIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDishesDishID")
	}

	response := handler(r.Context(), w, r, request)

	switch v := response.(type) {
	case GetDishesDishID200JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		writeJSON(w, v)
	case GetDishesDishID400JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		writeJSON(w, v)
	case GetDishesDishID401Response:
		w.WriteHeader(401)
	case GetDishesDishID404Response:
		w.WriteHeader(404)
	case GetDishesDishID500JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		writeJSON(w, v)
	case error:
		sh.options.ResponseErrorHandlerFunc(w, r, v)
	case nil:
	default:
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", v))
	}
}

func writeJSON(w http.ResponseWriter, v interface{}) {
	if err := json.NewEncoder(w).Encode(v); err != nil {
		fmt.Fprintln(w, err)
	}
}

func writeRaw(w http.ResponseWriter, b []byte) {
	if _, err := w.Write(b); err != nil {
		fmt.Fprintln(w, err)
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX247bNhN+lQH/H2gLKLLTbHvhO28cpG6aZJED0CK7F7Q0sphIpMIZrasGfvdiSNmy",
	"V0qTAt2iV5JJzembbw7+pDJXN86iZVKLT4qyEmsdXi81meyJ987Lr8a7Bj0bDHe7UrM8uWtQLRSxN3ar",
	"9vvkcOI27zFjtU/UY4+a8aV/2+SacWWofIUfRTZHyrxp2DirFuqN15Zqw5Br1lA4D7mhEjKRli+SOx7I",
	"7Qtd41iTnIIrgEuMOtjBBqMmzGEGbfAkV8ld9xNF6G8xX/JY6y8uC47ArkSPwKWhqN0QRKmxvn2iPH5s",
	"jcdcLd4NLp/YuflKxKgZu7S2hfM1mCI6stN0DNJ5eN8SH0IFbXPwyK23YJhgvRrh2Uu+wJ0YnMpPi2JK",
	"g8XdyOAQ+8a5CrWVOAaVB/C+pLY6gvwF1WJ/vZqAZHXIfC89OyAgEin8LKBwzKCDWn9AoHZD+LFFy5Dp",
	"qiJATQa9SpSgKzRXxvKPF4MfxjJu0Y/yewfCo5eTSEwl/iny57O9QtamkkiGYwlWh9BG+dS321eahYYj",
	"Tctb9HqL4MN9qLUjnVN4WRsWwEzRA6U9gnVw6xgJOuQBCNvWG8EhUfarKnGq4lyWtd6jzfCxa+1E4S1r",
	"OQ9qTI10Unm9aD6RmUTF4CIUeW5Ema6uziAaC51bjvjRXYCeYUdQo7ZwrYi1p2sV6utWVy32N7112Bku",
	"gUvNoI9hBJkU1gXULnQSbeEP9AeEBe7GIwkhj0mEwmCVQ+Ysa2MpIKrP0piqCUJ5zNDyyyPENIb3uSOG",
	"+B0MuaDTtKXw3GxLBuv44EG425WuQigNsfOdSpRhrCcsxDKCruu6tK7TPD8tLSnOKVr0B9p73d17Y7ax",
	"Kd+l4hR+A7H+sokHj7PWG+5ey0SNyC8b8wy7ZcuhvxrxvkSdh2YTK0j9+mB5tX7w7Mlvg9M6SKm9KDW2",
	"cBNNVGJeXq1BV5XbRXbUaEnDxnFsdFaYIrAIw2wOBXJWRpyGgNhwJRbXb17Dtz+5Bou2qrrv4I0m7uDS",
	"sRhRibpFT9HyPH2YzkMZN2h1Y9RCPUrn6SNpR5rLEPUsG82zsFA4mshmnH3DjHG+n2Fg+BuCa1Vp4j6v",
	"1yrWnLQqGSGVR513gL8bYpJ6kGIP3FjnaqGuHPF4tKpIBSS+dHkXJqGzjLET6aapTKTX7D3F+RU3JHn7",
	"v8dCLdT/ZsMKNev3p9n01rM/Zx77FsMBNc5S5Mj38/m9OkFN9OIc9tdtliFRCq/6JeFzgx40wQ6rSp6H",
	"/rBehRZZtNx6DDwMg1RocTF/OM7xW0IPFjEn4WbltibM9B/+wchPdteJaNeW0VtdAcoXsGkZjG1aDoEW",
	"xqII7RM1iwUz+xSj3IvVLU6w9iky5GE+E1TmAx77v5TaaVc9GyUjhvbzH2l1WBwa7XWNjJ7U4l3fMqSw",
	"hoZx3DHOaZWcAPXlPebmHkl4utRM5OK41hgb/ZRWrjeu5WFtCET6t8hxqXNYBzbIP5H077L4Yn4xsbvF",
	"KpEBWrjW5v9Fup+MrMC102H17mZ/s/8zAAD//zkwfqErDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
